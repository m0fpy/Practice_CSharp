<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.EditorFeatures</name>
    </assembly>
    <members>
        <member name="F:Microsoft.CodeAnalysis.AddImportOnPaste.AddImportOnPasteOptionsStorage.AddImportsOnPaste">
            <summary>
            This option was previously "bool?" to accomodate different supported defaults
            that were being provided via remote settings. The feature has stabalized and moved
            to on by default, so the storage location was changed to
            TextEditor.%LANGUAGE%.Specific.AddImportsOnPaste2 (note the 2 suffix).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AbstractAddImportsPasteCommandHandler.DisplayName">
            <summary>
            The command handler display name
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.AddImport.AbstractAddImportsPasteCommandHandler.DialogText">
            <summary>
            The thread await dialog text shown to the user if the operation takes a long time
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.GetEndingString(Microsoft.CodeAnalysis.ParsedDocument,System.Int32)">
            <summary>
            get ending string if there is one
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.NextAction(Microsoft.VisualStudio.Text.Operations.IEditorOperations,System.Action)">
            <summary>
            do next action
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.FormatBasedOnEndToken(Microsoft.CodeAnalysis.ParsedDocument,System.Int32,Microsoft.CodeAnalysis.Formatting.SyntaxFormattingOptions,System.Threading.CancellationToken)">
            <summary>
            format after inserting ending string
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.TreatAsReturn(Microsoft.CodeAnalysis.ParsedDocument,System.Int32,System.Threading.CancellationToken)">
            <summary>
            special cases where we do not want to do line completion but just fall back to line break and formatting.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.ModifySelectedNode(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.AutomaticLineEnderCommandArgs,Microsoft.CodeAnalysis.ParsedDocument,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Add or remove the braces for <param name="selectedNode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.GetValidNodeToModifyBraces(Microsoft.CodeAnalysis.ParsedDocument,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the syntax node needs add/remove braces.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.GetInsertionPositionForEndingString(Microsoft.CodeAnalysis.ParsedDocument,Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            return insertion point for the ending string
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.InsertEnding(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.ParsedDocument,System.Int32,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.CodeAnalysis.Formatting.SyntaxFormattingOptions,System.Threading.CancellationToken)">
            <summary>
            insert ending string if there is one to insert
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AutomaticCompletion.Extensions.CreateEditTransaction(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry,Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService)">
            <summary>
            create caret preserving edit transaction with automatic code change undo merging policy
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.BackgroundWorkIndicator.DefaultBackgroundWorkIndicatorFactory">
            <summary>
            A default implementation of the background work indicator which simply defers to a threaded-wait-dialog to
            indicator that background work is happening.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.BackgroundWorkIndicator.DefaultBackgroundWorkIndicatorFactory.#ctor(Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor)">
            <summary>
            A default implementation of the background work indicator which simply defers to a threaded-wait-dialog to
            indicator that background work is happening.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.BackgroundWorkIndicator.IBackgroundWorkIndicatorContext.CancelOnEdit">
            <summary>
            Whether or not this context should cancel work if a navigation happens. Clients that use this indicator can 
            have this behavior set to true (so that they cancel if the user edits themselves), but then set this to
            false right before they edit themselves so that they do not self-cancel.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.BackgroundWorkIndicator.IBackgroundWorkIndicatorContext.CancelOnFocusLost">
            <summary>
            Whether or not this context should cancel work if the text view it is attached to loses focus. Clients that use
            this indicator can have this behavior set to true (so that they cancel if the user navigates themselves), but
            then set this to false right before they navigate themselves so that they do not self-cancel.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.BackgroundWorkIndicator.IBackgroundWorkIndicatorFactory">
            <summary>
            Factory for creating lightweight <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext"/>s that can sit in the editor in a
            unobtrusive fashion unlike the Threaded-Wait-Dialog.  Features can use this to indicate to users that work
            is happening in the background while not blocking the user from continuing to work with their code.
            </summary>
            <remarks>
            Only one background work indicator can be active at a time.  Any attempt to make a new indicator will cancel any
            existing outstanding item.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.BackgroundWorkIndicator.IBackgroundWorkIndicatorFactory.Create(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotSpan,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new background work indicator that appears as a tooltip at the requested location to notify the
            user that background work is happening.  The work is always cancellable the user hitting the 'escape' key.
            Any attempt to set <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation"/> to <see langword="false"/> is
            simply ignored.
            </summary>
            <remarks>
            Default cancellation behavior can also be specified through <paramref name="cancelOnEdit"/> and <paramref
            name="cancelOnFocusLost"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.ContentTypes.ContentTypeDefinitions.RoslynContentTypeDefinition">
            <summary>
            Definition of a content type that is a base definition for all content types supported by Roslyn.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo">
            <summary>
            Represents information about the ability to rename a particular location.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo.IsRenamingAttributePrefix">
            <summary>
            Whether or not we shortened the trigger span (say because we were renaming an attribute,
            and we didn't select the 'Attribute' portion of the name).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo.DefinitionLocations">
            <summary>
            The locations of the potential rename candidates for the symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo.GetReferenceEditSpan(Microsoft.CodeAnalysis.Editor.InlineRenameLocation,System.String,System.Threading.CancellationToken)">
             <summary>
             Given a span of text, we need to return the subspan that is editable and
             contains the current replacementText.
            
             These cases are currently handled:
                 - Escaped identifiers                          [goo] => goo
                 - Type suffixes in VB                          goo$ => goo
                 - Qualified names from complexification        A.goo => goo
                 - Optional Attribute suffixes                  XAttribute => X
                     Careful here:                              XAttribute => XAttribute if renamesymbol is XAttributeAttribute
                 - Compiler-generated EventHandler suffix       XEventHandler => X
                 - Compiler-generated get_ and set_ prefixes    get_X => X
             </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractInlineRenameUndoManager`1">
            <summary>
            This class contains the logic common to VS and ETA when implementing IInlineRenameUndoManager
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.ActiveSessionChanged">
            <summary>
            Raised when the ActiveSession property has changed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.TriggerSpan">
            <summary>
            The original <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> for the identifier that rename was triggered on
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ReplacementText">
            <summary>
            If non-null, the current text of the replacement. Linked spans added will automatically be updated with this
            text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.FileRenameInfo">
            <summary>
            Information about whether a file rename should be allowed as part
            of the rename operation, as determined by the language
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._keepAliveSession">
            <summary>
            Keep-alive session held alive with the OOP server.  This allows us to pin the initial solution snapshot over on
            the oop side, which is valuable for preventing it from constantly being dropped/synced on every conflict
            resolution step.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._allRenameLocationsTask">
            <summary>
            The task which computes the main rename locations against the original workspace
            snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._cancellationTokenSource">
            <summary>
            The cancellation token for most work being done by the inline rename session. This
            includes the <see cref="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._allRenameLocationsTask"/> tasks.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._conflictResolutionTask">
            <summary>
            This task is a continuation of the <see cref="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._allRenameLocationsTask"/> that is the result of computing
            the resolutions of the rename spans for the current replacementText.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._conflictResolutionTaskCancellationSource">
            <summary>
            The cancellation source for <see cref="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._conflictResolutionTask"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._initialRenameText">
            <summary>
            The initial text being renamed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyReplacementText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates the replacement text for the rename session and propagates it to all live buffers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitWorker(System.Boolean)">
            <returns><see langword="true"/> if the rename operation was committed, <see
            langword="false"/> otherwise</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitWorkerAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <returns><see langword="true"/> if the rename operation was commited, <see
            langword="false"/> otherwise</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.TryApplyRenameAsync(Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Returns non-null error message if renaming fails.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager">
            <summary>
            Manages state for open text buffers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager._referenceSpanToLinkedRenameSpanMap">
            <summary>
            The list of active tracking spans that are updated with the session's replacement text.
            These are also the only spans the user can edit during an inline rename session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.AreAllReferenceSpansMappable">
            <summary>
            This is a work around for a bug in Razor where the projection spans can get out-of-sync with the
            identifiers.  When that bug is fixed this helper can be deleted.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)">
            <summary>
            The method performs a preliminarily filtering of commit availability.
            In case of a doubt, it should respond with true.
            We will be able to cancel later in 
            <see cref="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CommitManager.TryCommit(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Char,System.Threading.CancellationToken)"/> 
            based on <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem"/> item, e.g. based on <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionItemRules"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSessionData">
            <summary>
            Contains data need to be tracked over an entire IAsyncCompletionSession completion
            session for various operations.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.VSCompletionItemData">
            <summary>
            We'd like to cache VS Completion item directly to avoid allocation completely. However it holds references
            to transient objects, which would cause memory leak (among other potential issues) if cached. 
            So as a compromise,  we cache data that can be calculated from Roslyn completion item to avoid repeated 
            calculation cost for cached Roslyn completion items.
            FilterSetData is the bit vector value from the FilterSet of this item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.VSCompletionItemData.#ctor(System.String,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter},System.Int32,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Adornments.ImageElement},System.String)">
            <summary>
            We'd like to cache VS Completion item directly to avoid allocation completely. However it holds references
            to transient objects, which would cause memory leak (among other potential issues) if cached. 
            So as a compromise,  we cache data that can be calculated from Roslyn completion item to avoid repeated 
            calculation cost for cached Roslyn completion items.
            FilterSetData is the bit vector value from the FilterSet of this item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.GetExcludedCommitCharacters(System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Completion.CompletionItem})">
            <summary>
            Build a map from added filter characters to corresponding items.
            CommitManager needs this information to decide whether it should commit selected item.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.FilterSet">
            <summary>
            Provides an efficient way to compute a set of completion filters associated with a collection of completion items.
            Presence of expander and filter in the set have different meanings. Set contains a filter means the filter is
            available but unselected, whereas it means available and selected for an expander. Note that even though VS supports 
            having multiple expanders, we only support one.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.FilterSet.#ctor(System.Boolean)">
            <summary>
            Provides an efficient way to compute a set of completion filters associated with a collection of completion items.
            Presence of expander and filter in the set have different meanings. Set contains a filter means the filter is
            available but unselected, whereas it means available and selected for an expander. Note that even though VS supports 
            having multiple expanders, we only support one.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.FilterSet.CombineFilterStates(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState})">
            <summary>
            Combine two filter lists while preserving the order as defined in <see cref="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.FilterSet"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.Helpers.PromoteItem(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Int32)">
            <summary>
            Add star to display text and store the index of the passed-in item in the original sorted list in
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.InitialSortedItemList"/> so we can retrieve it when needed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.Helpers.GetRoslynTrigger(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Attempts to convert VS Completion trigger into Roslyn completion trigger
            </summary>
            <param name="trigger">VS completion trigger</param>
            <param name="triggerLocation">Character. 
            VS provides Backspace and Delete characters inside the trigger while Roslyn needs the char deleted by the trigger.
            Therefore, we provide this character separately and use it for Delete and Backspace cases only.
            We retrieve this character from triggerLocation.
            </param>
            <returns>Roslyn completion trigger</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.CompletionListUpdater">
            <summary>
            Handles the filtering, sorting and selection of the completion items based on user inputs 
            (e.g. typed characters, selected filters, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.CompletionListUpdater.GetBestCompletionItemSelectionFromFilteredResults(System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Completion.MatchResult})">
            <summary>
            Given multiple possible chosen completion items, pick the one using the following preferences (in order):
                1. Most recently used item is our top preference
                2. IntelliCode item over non-IntelliCode item
                3. Higher MatchPriority
                4. Match to FilterText over AdditionalFilterTexts
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.CompletionListUpdater.IsPotentialFilterCharacter(System.Char)">
            <summary>
            A potential filter character is something that can filter a completion lists and is
            *guaranteed* to not be a commit character.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.CompletionListUpdater.GetDefaultsMatch(System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Completion.MatchResult},Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.CompletionListUpdater.ItemSelection,System.Threading.CancellationToken)">
            <summary>
            Compare the pattern matching result of the current selection with the pattern matching result of the suggested defaults (both w.r.t. the filter text.)
            If the suggested default is no worse than current selected item (in a case-sensitive manner,) use the suggested default. Otherwise use the original selection.
            For example, if user typed "C", roslyn might select "CancellationToken", but with suggested default "Console" we will end up selecting "Console" instead.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.FilterTextLengthToExcludeExpandedItemsExclusive">
            <summary>
            The threshold for us to consider exclude (potentially large amount of) expanded items from completion list.
            Showing a large amount of expanded items to user would introduce noise and render the list too long to browse.
            Not processing those expanded items also has perf benefit (e.g. matching and highlighting could be expensive.)
            We set it to 2 because it's common to use filter of length 2 for camel case match, e.g. `AB` for `ArrayBuilder`.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.RecentItemsManager._mruUpdateLock">
            <summary>
            Guard for <see cref="P:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.RecentItemsManager.RecentItems"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1._initialUnfilteredModel">
            <summary>
            Set when the first compute task completes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.IntellisenseQuickInfoBuilder.BuildContentWithoutNavigationActionsAsync(Microsoft.CodeAnalysis.QuickInfo.QuickInfoItem,Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.IntellisenseQuickInfoBuilderContext,System.Threading.CancellationToken)">
            <summary>
            Builds the classified hover content without navigation actions and requiring
            an instance of <see cref="T:Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter"/>
            TODO - This can be removed once LSP supports colorization in markupcontent
            https://devdiv.visualstudio.com/DevDiv/_workitems/edit/918138
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.IntellisenseQuickInfoBuilderContext">
            <summary>
            Context to build content for quick info item for intellisense.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.IntellisenseQuickInfoBuilderContext.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Classification.ClassificationOptions,Microsoft.CodeAnalysis.Formatting.LineFormattingOptions,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener,System.Lazy{Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter})">
            <summary>
            Context to build content for quick info item for intellisense.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ViewTextSpan">
            <summary>
            Helper class to use type-safety to enforce we're using TextSpans from the
            TextView's buffer.  Intellisense primarily uses spans from the SubjectBuffer
            which need to be mapped to ViewTextSpans before comparing to view positions
            such as the current caret location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ViewTextSpan.#ctor(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Helper class to use type-safety to enforce we're using TextSpans from the
            TextView's buffer.  Intellisense primarily uses spans from the SubjectBuffer
            which need to be mapped to ViewTextSpans before comparing to view positions
            such as the current caret location.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient._languageServer">
            <summary>
            Created when <see cref="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.ActivateAsync(System.Threading.CancellationToken)"/> is called.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.Name">
            <summary>
            Gets the name of the language client (displayed to the user).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.MiddleLayer">
            <summary>
            Gets the optional middle layer object that can intercept outgoing requests and responses.
            </summary>
            <remarks>
            Currently utilized by Razor to intercept Roslyn's workspace/semanticTokens/refresh requests.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.CustomMessageTarget">
            <summary>
            Unused, implementing <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2"/>.
            Gets the optional target object for receiving custom messages not covered by the language server protocol.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.ServerKind">
            <summary>
            An enum representing this server instance.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.SupportedLanguages">
            <summary>
            The set of languages that this LSP server supports and can return results for.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.ConfigurationSections">
            <summary>
            Unused, implementing <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient"/>
            No additional settings are provided for this server, so we do not need any configuration section names.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.InitializationOptions">
            <summary>
            Gets the initialization options object the client wants to send when 'initialize' message is sent.
            See https://microsoft.github.io/language-server-protocol/specifications/specification-3-14/#initialize
            We do not provide any additional initialization options.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.ShowNotificationOnInitializeFailed">
            <summary>
            Gets a value indicating whether a notification bubble show be shown when the language server fails to initialize.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.FilesToWatch">
            <summary>
            Unused, implementing <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient"/>
            Files that we care about are already provided and watched by the workspace.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.StopAsync">
            <summary>
            Unused, implementing <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.OnLoadedAsync">
            <summary>
            Signals that the extension has been loaded.  The server can be started immediately, or wait for user action to start.  
            To start the server, invoke the <see cref="E:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.StartAsync"/> event;
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.OnServerInitializedAsync">
            <summary>
            Signals the extension that the language server has been successfully initialized.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes when actions that need to be performed when the server is ready are done.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractInProcLanguageClient.AttachForCustomMessageAsync(StreamJsonRpc.JsonRpc)">
            <summary>
            Unused, implementing <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2"/>.
            This method is called after the language server has been activated, but connection has not been established.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActivateInProcLanguageClient">
            <summary>
            Language client responsible for handling C# / VB / F# LSP requests in any scenario (both local and codespaces).
            This powers "LSP only" features (e.g. cntrl+Q code search) that do not use traditional editor APIs.
            It is always activated whenever roslyn is activated.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActivateInProcLanguageClient.#ctor(Microsoft.CodeAnalysis.LanguageServer.CSharpVisualBasicLspServiceProvider,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.LanguageServer.ExperimentalCapabilitiesProvider,Microsoft.CodeAnalysis.LanguageServer.ILspServiceLoggerFactory,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.VisualStudio.Composition.ExportProvider,System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.CodeAnalysis.LanguageServer.ILspBuildOnlyDiagnostics,Microsoft.CodeAnalysis.LanguageServer.ILspBuildOnlyDiagnosticsMetadata}})">
            <summary>
            Language client responsible for handling C# / VB / F# LSP requests in any scenario (both local and codespaces).
            This powers "LSP only" features (e.g. cntrl+Q code search) that do not use traditional editor APIs.
            It is always activated whenever roslyn is activated.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActivateInProcLanguageClient.ShowNotificationOnInitializeFailed">
            <summary>
            When pull diagnostics is enabled, ensure that initialization failures are displayed to the user as
            they will get no diagnostics.  When not enabled we don't show the failure box (failure will still be recorded in the task status center)
            as the failure is not catastrophic.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActiveLanguageClientEventListener.StartListening(Microsoft.CodeAnalysis.Workspace,System.Object)">
            <summary>
            LSP clients do not necessarily know which language servers (and when) to activate as they are language
            agnostic.  We know we can provide <see cref="T:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActivateInProcLanguageClient"/> as soon as the
            workspace is started, so tell the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientBroker"/> to start loading it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActiveLanguageClientEventListener.LanguageClientMetadata">
            <summary>
            The <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientBroker.LoadAsync(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata,Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient)"/> 
            requires that we pass the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata"/> along with the language client instance.
            The implementation of <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata"/> is not public, so have to re-implement.
            https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1043922 tracking to remove this.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AlwaysActiveLanguageClientEventListener.LanguageClientMetadata.#ctor(System.String[],System.String)">
            <summary>
            The <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientBroker.LoadAsync(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata,Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient)"/> 
            requires that we pass the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata"/> along with the language client instance.
            The implementation of <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata"/> is not public, so have to re-implement.
            https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1043922 tracking to remove this.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.LiveShareInProcLanguageClient.ShowNotificationOnInitializeFailed">
            <summary>
            Failures are catastrophic as liveshare guests will not have language features without this server.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.RazorInProcLanguageClient">
            <summary>
            Defines the LSP server for Razor C#.  This is separate so that we can
            activate this outside of a liveshare session and publish diagnostics
            only for razor cs files.
            TODO - This can be removed once C# is using LSP for diagnostics.
            https://github.com/dotnet/roslyn/issues/42630
            </summary>
            <remarks>
            This specifies RunOnHost because in LiveShare we don't want this to activate on the guest instance
            because LiveShare drops the ClientName when it mirrors guest clients, so this client ends up being
            activated solely by its content type, which means it receives requests for normal .cs and .vb files
            even for non-razor projects, which then of course fails because it gets text sync info for documents
            it doesn't know about.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.RazorInProcLanguageClient.#ctor(Microsoft.CodeAnalysis.LanguageServer.CSharpVisualBasicLspServiceProvider,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.LanguageServer.ExperimentalCapabilitiesProvider,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.LanguageServer.ILspServiceLoggerFactory,Microsoft.VisualStudio.Composition.ExportProvider,Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.AbstractLanguageClientMiddleLayer)">
            <summary>
            Defines the LSP server for Razor C#.  This is separate so that we can
            activate this outside of a liveshare session and publish diagnostics
            only for razor cs files.
            TODO - This can be removed once C# is using LSP for diagnostics.
            https://github.com/dotnet/roslyn/issues/42630
            </summary>
            <remarks>
            This specifies RunOnHost because in LiveShare we don't want this to activate on the guest instance
            because LiveShare drops the ClientName when it mirrors guest clients, so this client ends up being
            activated solely by its content type, which means it receives requests for normal .cs and .vb files
            even for non-razor projects, which then of course fails because it gets text sync info for documents
            it doesn't know about.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.LanguageClient.RazorInProcLanguageClient.ShowNotificationOnInitializeFailed">
            <summary>
            If the razor server is activated then any failures are catastrophic as no razor c# features will work.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController">
            <summary>
            The controller for navigation bars.
            </summary>
            <remarks>
            The threading model for this class is simple: all non-static members are affinitized to the
            UI thread.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._lastPresentedInfo">
            <summary>
            The last full information we have presented. If we end up wanting to present the same thing again, we can
            just skip doing that as the UI will already know about this.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._eventSource">
            <summary>
            Source of events that should cause us to update the nav bar model with new information.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._onVisibilityChanged">
            <summary>
            Callback to us when the visibility of our <see cref="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._subjectBuffer"/> changes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._computeModelQueue">
            <summary>
            Queue to batch up work to do to compute the current model.  Used so we can batch up a lot of events and only
            compute the model once for every batch.  The <c>bool</c> type parameter isn't used, but is provided as this
            type is generic.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._selectItemQueue">
            <summary>
            Queue to batch up work to do to determine the selected item.  Used so we can batch up a lot of events and
            only compute the selected item once for every batch.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._paused">
            <summary>
            Whether or not the navbar is paused.  We pause updates when documents become non-visible. See <see
            cref="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._visibilityTracker"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.ComputeModelAndSelectItemAsync(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Starts a new task to compute the model based on the current text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.StartSelectedItemUpdateTask">
            <summary>
            Starts a new task to compute what item should be selected.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.GetMatchingItem(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Editor.NavigationBarItem},System.Int32,Microsoft.CodeAnalysis.Editor.INavigationBarItemService,System.Threading.CancellationToken)">
            <summary>
            Finds the item that point is in, or if it's not in any items, gets the first item that's
            positioned after the cursor.
            </summary>
            <returns>A tuple of the matching item, and if it should be shown grayed.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingCodeRefactoringProvider.ComputeRequestPriority">
            <summary>
            This is a high priority refactoring that we want to run first so that the user can quickly
            change the name of something and pop up the lightbulb without having to wait for the rest to
            compute.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider">
            <summary>
            Also known as "rename smart tag," this watches text changes in open buffers, determines
            whether they can be interpreted as an identifier rename, and if so displays a smart tag 
            that can perform a rename on that symbol. Each text buffer is tracked independently.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Editor.IInlineRenameService,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            Also known as "rename smart tag," this watches text changes in open buffers, determines
            whether they can be interpreted as an identifier rename, and if so displays a smart tag 
            that can perform a rename on that symbol. Each text buffer is tracked independently.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.TryCommitAsync(System.Threading.CancellationToken)">
            <summary>
            Returns non-null error message if renaming fails.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.TryApplyChangesToWorkspaceAsync(System.Threading.CancellationToken)">
            <summary>
            Returns non-null error message if renaming fails.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.TryUpdateWorkspaceForResetOfTypedIdentifier(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Solution,System.Int32)">
            <summary>
            Returns non-null error message if renaming fails.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.TryUpdateWorkspaceForGlobalIdentifierRename(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Solution,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Int32)">
            <summary>
            Returns non-null error message if renaming fails.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingSolutionSet">
            <summary>
            Tracks the solution before and after rename.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingSolutionSet.#ctor(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution)">
            <summary>
            Tracks the solution before and after rename.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.StateMachine">
            <summary>
            Keeps track of the rename tracking state for a given text buffer by tracking its
            changes over time.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.TrackingSession">
            <summary>
            Determines whether the original token was a renameable identifier on a background thread
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.UndoPrimitive">
            <summary>
            Clears or restores the state machine on relevant undo/redo actions.
            
            These may stay alive on the global undo stack well beyond the lifetime of the
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> on which they were created, so we must avoid strong
            references to anything that may hold that <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> alive.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.UndoPrimitive.#ctor(Microsoft.VisualStudio.Text.ITextBuffer,System.Int32,System.Boolean)">
            <summary>
            Clears or restores the state machine on relevant undo/redo actions.
            
            These may stay alive on the global undo stack well beyond the lifetime of the
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> on which they were created, so we must avoid strong
            references to anything that may hold that <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> alive.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Structure.AbstractStructureTaggerProvider">
             <summary>
             Shared implementation of the outliner tagger provider.
            
             Note: the outliner tagger is a normal buffer tagger provider and not a view tagger provider.
             This is important for two reasons.  The first is that if it were view-based then we would lose
             the state of the collapsed/open regions when they scrolled in and out of view.  Also, if the
             editor doesn't know about all the regions in the file, then it wouldn't be able to
             persist them to the SUO file to persist this data across sessions.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Structure.AbstractStructureTaggerProvider.CreateElisionBufferForTagTooltip(Microsoft.CodeAnalysis.Editor.Implementation.Structure.StructureTag)">
            <summary>
            Given a <see cref="T:Microsoft.CodeAnalysis.Editor.Implementation.Structure.StructureTag"/>, creates an ITextBuffer with the content to display 
            in the tooltip.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.Structure.StructureTag.CollapsedHintFormSpan">
            <summary>
            The contents of the buffer to show if we mouse over the collapsed indicator.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.FindLeafNode(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Finds deepest node that covers given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.TryFindLeafToken(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.CodeAnalysis.SyntaxToken@,System.Threading.CancellationToken)">
            <summary>
            Given position in a text buffer returns the leaf syntax node it belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.SkipSameSpanParents(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Returns first ancestor of the node which has a span wider than node's span.
            If none exist, returns the last available ancestor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.GetEnclosingNode(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Finds node enclosing current from navigation point of view (that is, some immediate ancestors
            may be skipped during this process).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan">
            <summary>
            Represents an editor <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> and the <see cref="T:Microsoft.CodeAnalysis.Document"/>
            the span was produced from.
            </summary>
            <remarks>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Represents an editor <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> and the <see cref="T:Microsoft.CodeAnalysis.Document"/>
            the span was produced from.
            </summary>
            <remarks>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan.Document">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Document"/> the span was produced from.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan.SnapshotSpan">
            <summary>
            The editor <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.EditorConfigSettings.Data.CodeStyleSetting`1._value">
            <summary>
            Stores the latest value of the option.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.EditorConfigSettings.Data.EnumFlagsSetting`1._valueStorage">
            <summary>
            Stores the latest value of the flags.
            Shared accross all instances of <see cref="T:Microsoft.CodeAnalysis.Editor.EditorConfigSettings.Data.EnumFlagsSetting`1"/> that represent bits of the same flags enum.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.EditorConfigSettings.Data.Setting`1._value">
            <summary>
            Stores the latest value of the option.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.EditorConfigSettings.Updater.SettingsUpdateHelper.s_headerPattern">
            <summary>
            <para>Regular expression for .editorconfig header.</para>
            <para>For example: "[*.cs]    # Optional comment"</para>
            <para>             "[*.{vb,cs}]"</para>
            <para>             "[*]    ; Optional comment"</para>
            <para>             "[ConsoleApp/Program.cs]"</para>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.EditorConfigSettings.Updater.SettingsUpdateHelper.s_optionEntryPattern">
            <summary>
            <para>Regular expression for .editorconfig code style option entry.</para>
            <para>For example:</para>
            <para> 1. "dotnet_style_object_initializer = true   # Optional comment"</para>
            <para> 2. "dotnet_style_object_initializer = true:suggestion   ; Optional comment"</para>
            <para> 3. "dotnet_diagnostic.CA2000.severity = suggestion   # Optional comment"</para>
            <para> 4. "dotnet_analyzer_diagnostic.category-Security.severity = suggestion   # Optional comment"</para>
            <para> 5. "dotnet_analyzer_diagnostic.severity = suggestion   # Optional comment"</para>
            <para>Regex groups:</para>
            <para> 1. Option key</para>
            <para> 2. Option value</para>
            <para> 3. Optional severity suffix in option value, i.e. ':severity' suffix</para>
            <para>4. Optional comment suffix</para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.GoToAdjacentMemberCommandHandler.GetTargetPosition(Microsoft.CodeAnalysis.LanguageService.ISyntaxFactsService,Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Boolean)">
            <summary>
            Internal for testing purposes.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ExportContentTypeLanguageServiceAttribute">
            <summary>
            Specifies the exact type of the service exported by the ILanguageService.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.ExportContentTypeLanguageServiceAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Specifies the exact type of the service exported by the ILanguageService.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames">
            <summary>
            Command handler names
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.AutomaticCompletion">
            <summary>
            Command handler name for Automatic Pair Completion
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.AutomaticLineEnder">
            <summary>
            Command handler name for Automatic Line Ender
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ChangeSignature">
            <summary>
            Command handler name for Change Signature.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ClassView">
            <summary>
            Command handler name for Class View.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.CommentSelection">
            <summary>
            Command handler name for Comment Selection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Commit">
            <summary>
            Command handler name for Commit.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.DocumentationComments">
            <summary>
            Command handler name for Documentation Comments.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.EncapsulateField">
            <summary>
            Command handler name for Encapsulate Field.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.EndConstruct">
            <summary>
            Command handler name for End Construct.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.EventHookup">
            <summary>
            Command handler name for Event Hookup.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ExtractInterface">
            <summary>
            Command handler name for Extract Interface
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ExtractMethod">
            <summary>
            Command handler name for Extract Method
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.FindReferences">
            <summary>
            Command handler name for Find References.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.FormatDocument">
            <summary>
            Command handler name for Format Document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.GoToBase">
            <summary>
            Command handler name for Go to Base.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.GoToDefinition">
            <summary>
            Command handler name for Go to Definition.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.GoToImplementation">
            <summary>
            Command handler name for Go to Implementation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.GoToAdjacentMember">
            <summary>
            Command handler name for Go to Adjacent Member.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Indent">
            <summary>
            Command handler name for Indent.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.NavigateToHighlightedReference">
            <summary>
            Command handler name for Navigate to Highlighted Reference.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.OrganizeDocument">
            <summary>
            Command handler name for Organize Document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.QuickInfo">
            <summary>
            Command handler name for Quick Info.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Rename">
            <summary>
            Command handler name for Rename.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.RenameTrackingCancellation">
            <summary>
            Command handler name for Rename Tracking cancellation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.SignatureHelpBeforeCompletion">
            <summary>
            Command handler name for a Signature Help command handler executing before <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.CompletionCommandHandler"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.SignatureHelpAfterCompletion">
            <summary>
            Command handler name for a Signature Help command handler executing after <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.CompletionCommandHandler"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.StringCopyPaste">
            <summary>
            Command handler name for String Copy Paste.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ToggleBlockComment">
            <summary>
            Command handler name for Toggle Block Comments.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ToggleLineComment">
            <summary>
            Command handler name for Toggle Line Comments.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.InteractivePaste">
            <summary>
            Command handler name for Paste Content in Interactive Format. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.PasteTrackingPaste">
            <summary>
            Command handler name for Paste in Paste Tracking.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.AddImportsPaste">
            <summary>
            Command handler name for Paste in Add Imports.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.EditAndContinueFileSave">
            <summary>
            Command handler name for Edit and Continue file save handler.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ShowValueTracking">
            <summary>
            Command handler name for showing the Value Tracking tool window.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ShowCallstackExplorer">
            <summary>
            Command handler name for showing the Callstack Explorer tool window.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ICustomCommitCompletionProvider">
            <summary>
            Interface to implement for a completion provider that wants to provide customized commit
            behavior.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.Keyword">
            <summary>
            Completion provider for language keywords.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.INavigationBarItemService.TryNavigateToItemAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Editor.NavigationBarItem,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextVersion,System.Threading.CancellationToken)">
            <summary>
            Returns <see langword="true"/> if navigation (or generation) happened.  <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.INavigationBarPresenter.CaretMovedOrActiveViewChanged">
            <summary>
            An event raised when the caret is moved or the active view in the document changed. In either case, the symbol under the caret has changed, so we should refresh.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.NavigationBarItem.Spans">
            <summary>
            The spans in the owning document corresponding to this nav bar item.  If the user's caret enters one of
            these spans, we'll select that item in the nav bar (except if they're in an item's span that is nested
            within this).
            </summary>
            <remarks>This can be empty for items whose location is in another document.</remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.WrappedNavigationBarItem">
            <summary>
            Implementation of the editor layer <see cref="T:Microsoft.CodeAnalysis.Editor.NavigationBarItem"/> that wraps a feature layer <see cref="T:Microsoft.CodeAnalysis.NavigationBar.RoslynNavigationBarItem"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Host.IPreviewDialogService">
            <summary>
            Displays the Preview Changes Dialog comparing two solutions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IPreviewDialogService.PreviewChanges(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Glyph,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution,System.Boolean)">
            <summary>
            Presents the user a preview of the changes, based on a textual diff
            between <paramref name="newSolution"/> and <paramref name="oldSolution"/>.
            </summary>
            <param name="title">The title of the preview changes dialog.</param>
            <param name="helpString">The keyword used by F1 help in the dialog.</param>
            <param name="description">Text to display above the treeview in the dialog.</param>
            <param name="topLevelName">The name of the root item in the treeview in the dialog.</param>
            <param name="topLevelGlyph">The <see cref="T:Microsoft.CodeAnalysis.Glyph"/> of the root item in the treeview.</param>
            <param name="newSolution">The changes to preview.</param>
            <param name="oldSolution">The baseline solution.</param>
            <param name="showCheckBoxes">Whether or not preview dialog should display item checkboxes.</param>
            <returns>Returns <paramref name="oldSolution"/> with the changes selected in the dialog
            applied. Returns null if cancelled.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter">
            <summary>
            API for hosts to provide if they can present FindUsages results in a streaming manner.
            i.e. if they support showing results as they are found instead of after all of the results
            are found.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter.StartSearch(System.String,System.Boolean)">
            <summary>
            Tells the presenter that a search is starting.  The returned <see cref="T:Microsoft.CodeAnalysis.FindUsages.FindUsagesContext"/>
            is used to push information about the search into.  i.e. when a reference is found
            <see cref="M:Microsoft.CodeAnalysis.FindUsages.FindUsagesContext.OnReferenceFoundAsync(Microsoft.CodeAnalysis.FindUsages.SourceReferenceItem,System.Threading.CancellationToken)"/> should be called.  When the
            search completes <see cref="M:Microsoft.CodeAnalysis.FindUsages.FindUsagesContext.OnCompletedAsync(System.Threading.CancellationToken)"/> should be called. 
            etc. etc.
            </summary>
            <param name="title">A title to display to the user in the presentation of the results.</param>
            <param name="supportsReferences">Whether or not showing references is supported.
            If true, then the presenter can group by definition, showing references underneath.
            It can also show messages about no references being found at the end of the search.
            If false, the presenter will not group by definitions, and will show the definition
            items in isolation.</param>
            <returns>A cancellation token that will be triggered if the presenter thinks the search
            should stop.  This can normally happen if the presenter view is closed, or recycled to
            start a new search in it.  Callers should only use this if they intend to report results
            asynchronously and thus relinquish their own control over cancellation from their own
            surrounding context.  If the caller intends to populate the presenter synchronously,
            then this cancellation token can be ignored.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter.StartSearchWithCustomColumns(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Call this method to display the Containing Type, Containing Member, or Kind columns
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter.ClearAll">
            <summary>
            Clears all the items from the presenter.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenterExtensions.GetStreamingLocationAsync(Microsoft.CodeAnalysis.Editor.Host.IStreamingFindUsagesPresenter,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Workspace,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.FindUsages.DefinitionItem},System.Threading.CancellationToken)">
            <summary>
            Returns a navigable location that will take the user to the location there's only destination, or which will
            present all the locations if there are many.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IContentTypeLanguageService">
            <summary>
            Service to provide the default content type for a language.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IInlineRenameService">
            <summary>
            Provides services for starting an interactive rename session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameService.StartInlineSession(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Starts an interactive rename session. If an existing inline session was active, it will
            commit the previous session, possibly causing changes to the text buffer.
            </summary>
            <param name="document">The Document containing the triggerSpan.</param>
            <param name="triggerSpan">The triggerSpan itself.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The rename session.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameService.ActiveSession">
            <summary>
            Returns the currently active inline session, or null if none is active.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineRenameSessionInfo.CanRename">
            <summary>
            Whether or not the entity at the selected location can be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineRenameSessionInfo.LocalizedErrorMessage">
            <summary>
            Provides the reason that can be displayed to the user if the entity at the selected 
            location cannot be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineRenameSessionInfo.Session">
            <summary>
            The session created if it was possible to rename the entity.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameSession.Cancel">
            <summary>
            Cancels the rename session, and undoes any edits that had been performed by the session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameSession.CommitAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Dismisses the rename session, completing the rename operation across all files.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineHints.IInlineHintKeyProcessor.State">
            <summary>
            The current state of the keyprocessor.  i.e. whether or not the key binding is currently being held down or
            not.  Can be read on any thread.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.InlineHints.IInlineHintKeyProcessor.StateChanged">
            <summary>
            Called when the state of the keyprocessor changes.  Only fired on UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintDataTag">
            <summary>
            The simple tag that only holds information regarding the associated parameter name
            for the argument
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintDataTag.#ctor(Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintsDataTaggerProvider,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.InlineHints.InlineHint)">
            <summary>
            The simple tag that only holds information regarding the associated parameter name
            for the argument
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintDataTag._snapshot">
            <summary>
            The snapshot this tag was created against.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintsDataTaggerProvider">
            <summary>
            The TaggerProvider that calls upon the service in order to locate the spans and names
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintsDataTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Editor.InlineHints.IInlineHintKeyProcessor,Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            The TaggerProvider that calls upon the service in order to locate the spans and names
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineHints.InlineHintsDataTaggerProvider.TextChangeBehavior">
            <summary>
            We want to make sure that if the user edits the space that the tag exists in that it goes away and they
            don't see stale tags sticking around in random locations until the next update.  A good example of when this
            is desirable is 'cut line'. If the tags aren't removed, then the line will be gone but the tags will remain
            at whatever points the tracking spans moved them to.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.InlineRenameFileRenameInfo.NotAllowed">
            <summary>
            This operation is not allowed
            on the symbol being renamed
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.InlineRenameFileRenameInfo.TypeWithMultipleLocations">
            <summary>
            The type being renamed has multiple definition
            locations which is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.InlineRenameFileRenameInfo.TypeDoesNotMatchFileName">
            <summary>
            The type being renamed doesn't match the file
            name prior to renaming
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.InlineRenameFileRenameInfo.Allowed">
            <summary>
            File rename is allowed
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.NewSolution">
            <summary>
            The solution obtained after resolving all conflicts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.ReplacementTextValid">
            <summary>
            Whether or not the replacement text entered by the user is valid.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.DocumentIds">
            <summary>
            The documents that need to be updated.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.GetReplacements(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Returns all the replacements that need to be performed for the specified document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet.Locations">
            <summary>
            The set of locations that need to be updated with the replacement text that the user
            has entered in the inline rename session.  These are the locations are all relative
            to the solution when the inline rename session began.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet.GetReplacementsAsync(System.String,Microsoft.CodeAnalysis.Rename.SymbolRenameOptions,System.Threading.CancellationToken)">
            <summary>
            Returns the set of replacements and their possible resolutions if the user enters the
            provided replacement text and options.  Replacements are keyed by their document id
            and TextSpan in the original solution, and specify their new span and possible conflict
            resolution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.CanRename">
            <summary>
            Whether or not the entity at the selected location can be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.LocalizedErrorMessage">
            <summary>
            Provides the reason that can be displayed to the user if the entity at the selected 
            location cannot be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.TriggerSpan">
            <summary>
            The span of the entity that is being renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.HasOverloads">
            <summary>
            Whether or not this entity has overloads that can also be renamed if the user wants.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.MustRenameOverloads">
            <summary>
            True if overloads must be renamed (the user is not given a choice). Used if rename is invoked from within a nameof expression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.DisplayName">
            <summary>
            The short name of the symbol being renamed, for use in displaying information to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.FullDisplayName">
            <summary>
            The full name of the symbol being renamed, for use in displaying information to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.Glyph">
            <summary>
            The glyph for the symbol being renamed, for use in displaying information to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.DefinitionLocations">
            <summary>
            The locations of the potential rename candidates for the symbol.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetFinalSymbolName(System.String)">
            <summary>
            Gets the final name of the symbol if the user has typed the provided replacement text
            in the editor.  Normally, the final name will be same as the replacement text.  However,
            that may not always be the same.  For example, when renaming an attribute the replacement
            text may be "NewName" while the final symbol name might be "NewNameAttribute".
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetReferenceEditSpan(Microsoft.CodeAnalysis.Editor.InlineRenameLocation,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the actual span that should be edited in the buffer for a given rename reference
            location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetConflictEditSpan(Microsoft.CodeAnalysis.Editor.InlineRenameLocation,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the actual span that should be edited in the buffer for a given rename conflict
            location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.FindRenameLocationsAsync(Microsoft.CodeAnalysis.Rename.SymbolRenameOptions,System.Threading.CancellationToken)">
            <summary>
            Determine the set of locations to rename given the provided options. May be called 
            multiple times.  For example, this can be called one time for the initial set of
            locations to rename, as well as any time the rename options are changed by the user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.String)">
            <summary>
            Called before the rename is applied to the specified documents in the workspace.  Return 
            <see langword="true"/> if rename should proceed, or <see langword="false"/> if it should be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.String)">
            <summary>
            Called after the rename is applied to the specified documents in the workspace.  Return 
            <see langword="true"/> if this operation succeeded, or <see langword="false"/> if it failed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetFileRenameInfo">
            <summary>
            Returns information about the file rename capabilities of 
            an inline rename
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IEditorInlineRenameService">
            <summary>
            Language service that allows a language to participate in the editor's inline rename feature.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IInlineRenameUndoManager">
            <summary>
            This interface contains the methods required to manipulate the undo stack
            in each buffer during an inline rename session.  VS and ETA have differing
            implementations
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService">
            <summary>
            Allows editors to listen to refactoring events and take appropriate action. For example, 
            when VS knows about a symbol rename, it asks the Xaml language service to update xaml files
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)">
            <summary>
            Notifies any interested parties that a rename action is about to happen. 
            Implementers can request the rename action be cancelled, in which case they should 
            return false or throw an exception, depending on the throwOnFailure argument. Callers 
            should honor cancellation requests by not applying the rename and not calling 
            <see cref="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)"/>.
            </summary>
            <returns>True if the rename should proceed.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)">
            <summary>
            Notifies any interested parties that a symbol rename has been applied to the 
            workspace. This should only be called if <see cref="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)"/> was
            called and returned true before the symbol rename was applied to the workspace. 
            In the event of a failure to rename, implementers should return false or throw an
            exception, depending on the throwOnFailure argument.
            </summary>
            <returns>True if the rename was successful.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commanding.Commands.GoToImplementationCommandArgs">
            <summary>
            Arguments for Go To Implementation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Commanding.Commands.GoToImplementationCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Arguments for Go To Implementation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commanding.Commands.OrganizeDocumentCommandArgs">
            <summary>
            Arguments for the Organize Document command being invoked.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Commanding.Commands.OrganizeDocumentCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Arguments for the Organize Document command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commanding.Commands.SortAndRemoveUnnecessaryImportsCommandArgs">
            <summary>
            Arguments for the Sort and Remove Unused Usings command being invoked.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Commanding.Commands.SortAndRemoveUnnecessaryImportsCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Arguments for the Sort and Remove Unused Usings command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commanding.Commands.SortImportsCommandArgs">
            <summary>	
            Arguments for the Sort Imports command being invoked.	
            </summary>	
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Commanding.Commands.SortImportsCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>	
            Arguments for the Sort Imports command being invoked.	
            </summary>	
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem">
            <summary>
            Construct an instance of <see cref="T:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem"/>
            </summary>
            <param name="projectId"><see cref="F:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.ProjectId"/> for the <see cref="T:Microsoft.CodeAnalysis.Project"/> that contains the content being visualized in the supplied <paramref name="lazyPreview"/></param>
            <param name="documentId"><see cref="F:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.DocumentId"/> for the <see cref="T:Microsoft.CodeAnalysis.Document"/> being visualized in the supplied <paramref name="lazyPreview"/></param>
            <param name="lazyPreview">Lazily instantiated preview content.</param>
            <remarks>Use lazy instantiation to ensure that any <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that may be present inside a given preview are only instantiated at the point
            when the VS lightbulb requests that preview. Otherwise, we could end up instantiating a bunch of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s most of which will never get
            passed to the VS lightbulb. Such zombie <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s will never get closed and we will end up leaking memory.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.#ctor(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Construct an instance of <see cref="T:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem"/>
            </summary>
            <param name="projectId"><see cref="F:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.ProjectId"/> for the <see cref="T:Microsoft.CodeAnalysis.Project"/> that contains the content being visualized in the supplied <paramref name="lazyPreview"/></param>
            <param name="documentId"><see cref="F:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.DocumentId"/> for the <see cref="T:Microsoft.CodeAnalysis.Document"/> being visualized in the supplied <paramref name="lazyPreview"/></param>
            <param name="lazyPreview">Lazily instantiated preview content.</param>
            <remarks>Use lazy instantiation to ensure that any <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that may be present inside a given preview are only instantiated at the point
            when the VS lightbulb requests that preview. Otherwise, we could end up instantiating a bunch of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s most of which will never get
            passed to the VS lightbulb. Such zombie <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s will never get closed and we will end up leaking memory.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.SolutionPreviewResult.Merge(Microsoft.CodeAnalysis.Editor.SolutionPreviewResult,Microsoft.CodeAnalysis.Editor.SolutionPreviewResult)">
            <summary>Merge two different previews into one final preview result.  The final preview will
            have a concatenation of all the inidivual previews contained within each result.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetLanguageName(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns the name of the language (see <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>) associated with the specified buffer. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.s_hostServicesToContentTypeMap">
            <summary>
            A cache of host services -> (language name -> content type name).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IContentTypeExtensions.MatchesAny(Microsoft.VisualStudio.Utilities.IContentType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Test whether an extension matches a content type.
            </summary>
            <param name="dataContentType">Content type (typically of a text buffer) against which to
            match an extension.</param>
            <param name="extensionContentTypes">Content types from extension metadata.</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IProjectionBufferFactoryServiceExtensions.RoslynPreviewContentTypeDefinition">
            <summary>
            Hack to get view taggers working on our preview surfaces.  We need to define
            both projection and text in order for this to work.  Talk to JasonMal for he is the only
            one who understands this.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferEditExtensions.ApplyAndLogExceptions(Microsoft.VisualStudio.Text.ITextBufferEdit)">
            <summary>
            Logs exceptions thrown during <see cref="M:Microsoft.VisualStudio.Text.ITextBufferEdit.Apply"/> as we look for issues.
            </summary>
            <param name="edit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferExtensions.SupportsRefactorings(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Checks if a buffer supports refactorings.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferExtensions.SupportsRename(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Checks if a buffer supports rename.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferExtensions.SupportsCodeFixes(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Checks if a buffer supports code fixes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferExtensions.SupportsNavigationToAnyPosition(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Checks if a buffer supports navigation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.FormatAndApplyToBuffer(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.EditorOptionsService,System.Threading.CancellationToken)">
            <summary>
            format given snapshot and apply text changes to buffer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.GetFullyLoadedOpenDocumentInCurrentContextWithChangesAsync(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Document"/> from <see cref="M:Microsoft.CodeAnalysis.Text.Extensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot)"/>
            once <see cref="M:Microsoft.CodeAnalysis.Host.IWorkspaceStatusService.WaitUntilFullyLoadedAsync(System.Threading.CancellationToken)"/> returns
            
            for synchronous code path, make sure to use synchronous version 
            <see cref="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.GetFullyLoadedOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext)"/>.
            otherwise, one can get into a deadlock
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.GetFullyLoadedOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Document"/> from <see cref="M:Microsoft.CodeAnalysis.Text.Extensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot)"/>
            once <see cref="M:Microsoft.CodeAnalysis.Host.IWorkspaceStatusService.WaitUntilFullyLoadedAsync(System.Threading.CancellationToken)"/> returns
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetContentTypes(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Collects the content types in the view's buffer graph.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.SetMultiSelection(Microsoft.VisualStudio.Text.Editor.ITextView,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.SnapshotSpan})">
            <summary>
            Sets a multi selection with the last span as the primary selection.
            Also maps up to the correct span in view before attempting to set the selection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreateAutoClosingProperty``2(``1,System.Func{``1,``0})">
            <summary>
            Gets or creates a view property that would go away when view gets closed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreateAutoClosingProperty``2(``1,System.Object,System.Func{``1,``0})">
            <summary>
            Gets or creates a view property that would go away when view gets closed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreateAutoClosingProperty``2(``1,System.Object,System.Func{``1,``0},``0@)">
            <summary>
            Gets or creates a view property that would go away when view gets closed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreatePerSubjectBufferProperty``2(``1,Microsoft.VisualStudio.Text.ITextBuffer,System.Object,System.Func{``1,Microsoft.VisualStudio.Text.ITextBuffer,``0})">
            <summary>
            Gets or creates a per subject buffer property.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreatePerSubjectBufferProperty``2(``1,Microsoft.VisualStudio.Text.ITextBuffer,System.Object,System.Func{``1,Microsoft.VisualStudio.Text.ITextBuffer,``0},``0@)">
            <summary>
            Gets or creates a per subject buffer property, returning true if it needed to create it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetVisibleLinesSpan(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.Int32)">
            <summary>
            Returns the span of the lines in subjectBuffer that is currently visible in the provided
            view.  "extraLines" can be provided to get a span that encompasses some number of lines
            before and after the actual visible lines.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.IsNotSurfaceBufferOfTextView(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Determines if the textbuffer passed in matches the buffer for the textview.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Extensions.MefExtensions">
            <summary>
            Helper class to perform ContentType best-match against a set of extensions. This could
            become a public service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.MefExtensions.SelectMatchingExtensions``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},Microsoft.VisualStudio.Utilities.IContentType[])">
            <summary>
            Given a list of extensions that provide content types, filter the list and return that
            subset which matches the given content type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.MefExtensions.SelectMatchingExtensions``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Utilities.IContentType})">
            <summary>
            Given a list of extensions that provide content types, filter the list and return that
            subset which matches any of the given content types.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Extensions.SpanExtensions">
            <summary>
            Extension methods for the editor Span struct
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.SpanExtensions.ToTextSpan(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Convert the editor Span instance to the corresponding TextSpan instance
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.ApplyDocumentChanges(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Update the workspace so that the document with the Id of <paramref name="newDocument"/>
            has the text of newDocument.  If the document is open, then this method will determine a
            minimal set of changes to apply to the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.ApplyTextChanges(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            Update the solution so that the document with the Id has the text changes
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Options.EditorComponentOnOffOptions">
            <summary>
            options to indicate whether a certain component in Roslyn is enabled or not
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Options.FeatureOnOffOptions.RenameTracking">
            <summary>
            This option is not currently used by Roslyn, but we might want to implement it in the
            future. Keeping the option while it's unimplemented allows all upgrade paths to
            maintain any customized value for this setting, even through versions that have not
            implemented this feature yet.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Options.FeatureOnOffOptions.RefactoringVerification">
            <summary>
            This option is not currently used by Roslyn, but we might want to implement it in the
            future. Keeping the option while it's unimplemented allows all upgrade paths to
            maintain any customized value for this setting, even through versions that have not
            implemented this feature yet.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Options.FeatureOnOffOptions.SkipAnalyzersForImplicitlyTriggeredBuilds">
            <summary>
            Not used by Roslyn but exposed in C# and VB option UI. Used by TestWindow and Project System.
            TODO: remove https://github.com/dotnet/roslyn/issues/57253
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractWorkspaceTrackingTaggerEventSource">
            <summary>
            An abstract implementation of a tagger event source that takes a buffer and tracks
            the workspace that it's attached to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TaggerEventSources.OnWorkspaceChanged(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener)">
            <summary>
            Reports an event any time the workspace changes.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.NavigableHighlightTag">
            <summary>
            The base type of any text marker tags that can be navigated with Ctrl+Shift+Up and Ctrl+Shift+Down.
            </summary>
            <remarks>
            Unless you are writing code relating to reference or keyword highlighting, you should not be using
            this type.</remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1">
            <summary>
            A tag span interval tree represents an ordered tree data structure to store tag spans in.  It
            allows you to efficiently find all tag spans that intersect a provided span.  Tag spans are
            tracked. That way you can query for intersecting/overlapping spans in a different snapshot
            than the one for the tag spans that were added.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1.AppendIntersectingSpansInSortedOrder(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.CodeAnalysis.Collections.SegmentedList{Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0}})">
            <summary>
            Gets all the spans that intersect with <paramref name="snapshotSpan"/> in sorted order and adds them to
            <paramref name="result"/>.  Note the sorted chunk of items are appended to <paramref name="result"/>.  This
            means that <paramref name="result"/> may not be sorted if there were already items in them.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.AutomaticCodeChangeMergePolicy">
            <summary>
            a merge policy that should be used for any automatic code changes that could happen in sequences so that
            all those steps are shown to users as one undo transaction rather than multiple ones
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.AbstractClassificationTypeMap">
            <summary>
            This type only exists for binary compat with TypeScript.  Once they move to EA for
            <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap"/>, then we can remove this.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject">
            <summary>
            Base class that allows some helpers for detecting whether we're on the main WPF foreground thread, or
            a background thread.  It also allows scheduling work to the foreground thread at below input priority.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.ThisCanBeCalledOnAnyThread">
            <summary>
            A helpful marker method that can be used by deriving classes to indicate that a 
            method can be called from any thread and is not foreground or background affinitized.
            This is useful so that every method in deriving class can have some sort of marker
            on each method stating the threading constraints (FG-only/BG-only/Any-thread).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.IsInputPending">
            <summary>
            Returns true if any keyboard or mouse button input is pending on the message queue.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.HACK_TextUndoTransactionThatRollsBackProperly">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that wraps another
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />. Some undo implementations (notably the VS implementation)
            violate the specified contract for Cancel(), which states that cancelling an active transaction
            should undo the primitives that we already added. This works around that problem; calling Cancel()
            on this forwards the cancellation to the inner transaction, and if it failed to roll back we
            do it ourselves.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.HACK_TextUndoTransactionThatRollsBackProperly.#ctor(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that wraps another
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />. Some undo implementations (notably the VS implementation)
            violate the specified contract for Cancel(), which states that cancelling an active transaction
            should undo the primitives that we already added. This works around that problem; calling Cancel()
            on this forwards the cancellation to the inner transaction, and if it failed to roll back we
            do it ourselves.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext">
            <summary>
            Provides a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskContext"/> which Roslyn code can use for transitioning
            to the main thread and/or waiting for asynchronous operations when required.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext.HasMainThread">
            <summary>
            Gets a value indicating whether the threading context is configured with a main thread that can be used for
            scheduling operations.
            </summary>
            <remarks>
            <para>Existence of a main thread is a requirement for correct runtime behavior (in production) of all types
            that depend on <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext"/>, so code is generally not expected to check this property.
            However, in some lightweight testing scenarios the main thread will not be used, and the test code avoids
            setting up the main thread. This property improves the ability to detect incorrectly configured tests (where
            a main thread is expected but not provided) and produce a meaningful error for developers.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext.JoinableTaskContext">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskContext"/> for use in Roslyn code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext.JoinableTaskFactory">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory"/> for use in Roslyn code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext.DisposalToken">
            <summary>
            Gets a <see cref="T:System.Threading.CancellationToken"/> indicating that disposal has been requested for the threading
            context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext.RunWithShutdownBlockAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
             <summary>
             Runs an asynchronous operation. If the operation is not complete prior to the time the threading context is
             disposed, the operation will block the shutdown.
             </summary>
             <remarks>
             <para>The callback function <paramref name="func"/> is invoked synchronously prior to this method returning.
             The entire asynchronous operation performed by <paramref name="func"/> will block shutdown of the threading
             context.</para>
            
             <para>If the threading context is already disposed at the time this is called, the operation is cancelled
             without calling <paramref name="func"/>.</para>
             </remarks>
             <param name="func">The callback function that performs an asynchronous operation.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IWorkspaceContextService.IsInLspEditorContext">
            <summary>
            Determines if LSP is being used as the editor.
            Used to disable non-LSP editor feature integration.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IWorkspaceContextService.IsCloudEnvironmentClient">
            <summary>
            Determines if the VS instance is being as a cloud environment client.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Utilities.DefaultWorkspaceContextService.LspEditorFeatureFlagName">
            <summary>
            Roslyn LSP feature flag name, as defined in the PackageRegistraion.pkgdef
            by everything following '$RootKey$\FeatureFlags\' and '\' replaced by '.'
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Utilities.LinkedEditsTracker._trackingSpans">
            <summary>
            The list of active tracking spans.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ResettableDelay.#ctor(System.Int32,Microsoft.CodeAnalysis.Shared.TestHooks.IExpeditableDelaySource,System.Threading.CancellationToken)">
            <summary>
            Create a ResettableDelay that will complete a task after a certain duration.  The delay
            can be reset at any point before it elapses in which case completion is postponed.  The
            delay can be reset multiple times.
            </summary>
            <param name="delayInMilliseconds">The time to delay before completing the task</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ThreadingContext">
            <summary>
            Implements <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext"/>, which provides an implementation of
            <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory"/> to Roslyn code.
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory"/> is constructed from the
            <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskContext"/> provided by the MEF container, if available. If no
            <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskContext"/> is available, a new instance is constructed using the
            synchronization context of the current thread as the main thread.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ThreadingContext.HasMainThread">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ThreadingContext.JoinableTaskContext">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ThreadingContext.JoinableTaskFactory">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1">
            <summary>
            Base type of all asynchronous tagger providers (<see cref="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider"/> and <see cref="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider"/>). 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TextChangeBehavior">
            <summary>
            The behavior the tagger engine will have when text changes happen to the subject buffer
            it is attached to.  Most taggers can simply use <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.None"/>.
            However, advanced taggers that want to perform specialized behavior depending on what has
            actually changed in the file can specify <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.TrackTextChanges"/>.
            
            If this is specified the tagger engine will track text changes and pass them along as
            <see cref="P:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1.TextChangeRange"/> when calling 
            <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CaretChangeBehavior">
            <summary>
            The behavior the tagger will have when changes happen to the caret.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.SpanTrackingMode">
            <summary>
            The behavior of tags that are created by the async tagger.  This will matter for tags
            created for a previous version of a document that are mapped forward by the async
            tagging architecture.  This value cannot be <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.Options">
            <summary>
            Global options controlling if the tagger should tag or not.  These correspond to user facing options to
            completely disable a feature or not.
            <para>
            An empty enumerable can be returned to indicate that this tagger should run unconditionally.</para>
            </summary>
            <remarks>All values must either be an <see cref="T:Microsoft.CodeAnalysis.Options.Option2`1"/> or a <see cref="T:Microsoft.CodeAnalysis.Options.PerLanguageOption2`1"/>.</remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.FeatureOptions">
            <summary>
            Options controlling the feature that should be used to determine if the feature should recompute tags.
            These generally correspond to user facing options to change how a feature behaves if it is running.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.EventChangeDelay">
            <summary>
            How long the tagger should wait after hearing about an event before recomputing tags.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.AddedTagNotificationDelay">
            <summary>
            This controls what delay tagger will use to let editor know about newly inserted tags
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CancelOnNewWork">
            <summary>
            Whether or not events from the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> should cancel in-flight tag-computation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagEquals(`0,`0)">
            <summary>
            Comparer used to check if two tags are the same.  Used so that when new tags are produced, they can be
            appropriately 'diffed' to determine what changes to actually report in <see cref="E:Microsoft.VisualStudio.Text.Tagging.ITagger`1.TagsChanged"/>.
            <para>
            Subclasses should always override this.  It is only virtual for binary compat.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetCaretPoint(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Called by the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/> infrastructure to 
            determine the caret position.  This value will be passed in as the value to 
            <see cref="P:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1.CaretPosition"/> in the call to
            <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.GetSpansToTag(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Called by the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/> infrastructure to determine
            the set of spans that it should asynchronously tag.  This will be called in response to
            notifications from the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> that something has changed, and
            will only be called from the UI thread.  The tagger infrastructure will then determine
            the <see cref="T:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan"/>s associated with these <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s
            and will asynchronously call into <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/> at some point in
            the future to produce tags for these spans.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateEventSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> that notifies the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/>
            that it should recompute tags for the text buffer after an appropriate <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)">
            <summary>
            Produce tags for the given context.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.Tagger">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.Tagger"/> is a thin wrapper we create around the single shared <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource"/>.
            Clients can request and dispose these at will.  Once the last wrapper is disposed, the underlying
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource"/> will finally be disposed as well.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource">
            <summary>
            <para>The <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource"/> is the core part of our asynchronous
            tagging infrastructure. It is the coordinator between <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>s,
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/>s, and <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>s.</para>
            
            <para>The <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource"/> is the type that actually owns the
            list of cached tags. When an <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> says tags need to be  recomputed,
            the tag source starts the computation and calls <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/> to build
            the new list of tags. When that's done, the tags are stored in <see cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.CachedTagTrees"/>. The 
            tagger, when asked for tags from the editor, then returns the tags that are stored in 
            <see cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.CachedTagTrees"/></para>
            
            <para>There is a one-to-many relationship between <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource"/>s
            and <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>s. Special cases, like reference highlighting (which processes multiple
            subject buffers at once) have their own providers and tag source derivations.</para>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.CoalesceDifferenceCount">
            <summary>
            If we get more than this many differences, then we just issue it as a single change
            notification.  The number has been completely made up without any data to support it.
            
            Internal for testing purposes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._asyncListener">
            <summary>
            async operation notifier
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._workspaceRegistration">
            <summary>
            Information about what workspace the buffer we're tagging is associated with.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._highPriTagsChangedQueue">
            <summary>
            Work queue that collects high priority requests to call TagsChanged with.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._normalPriTagsChangedQueue">
            <summary>
            Work queue that collects normal priority requests to call TagsChanged with.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._eventChangeQueue">
            <summary>
            Boolean specifies if this is the initial set of tags being computed or not.  This queue is used to batch
            up event change notifications and only dispatch one recomputation every <see cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.EventChangeDelay"/>
            to actually produce the latest set of tags.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._disposalTokenSource">
            <summary>
            Cancellation token governing all our async work.  Canceled/disposed when we are <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.Dispose"/>'d.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._visibilityTracker">
            <summary>
            Used to keep track of if this <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._subjectBuffer"/> is visible or not (e.g. is in some <see
            cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that has some part visible or not.  This is used so we can <see
            cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.PauseIfNotVisible"/> tagging when not visible to avoid wasting machine resources. Note: we do not
            examine <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._textView"/> for this as that is only available for "view taggers" (taggers which
            only tag portions of the view) whereas we want this for all taggers (including just buffer taggers which
            tag the entire document).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._onVisibilityChanged">
            <summary>
            Callback to us when the visibility of our <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._subjectBuffer"/> changes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._eventSource">
            <summary>
            Our tagger event source that lets us know when we should call into the tag producer for
            new tags.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._accumulatedTextChanges_doNotAccessDirectly">
            <summary>
            accumulated text changes since last tag calculation
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._firstTagsRequest">
            <summary>
            Keep track of if we are processing the first <see cref="M:Microsoft.VisualStudio.Text.Tagging.ITagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)"/> request.  If our provider returns 
            <see langword="true"/> for <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ComputeInitialTagsSynchronously(Microsoft.VisualStudio.Text.ITextBuffer)"/>,
            then we'll want to synchronously block then and only then for tags.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._paused">
            <summary>
            Whether or not tag generation is paused.  We pause producing tags when documents become non-visible.
            See <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._visibilityTracker"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.GetHashCode(Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0})">
            <summary>
            For the purposes of hashing, just hash spans.  This will prevent most collisions.  And the rare
            collision of two tag spans with the same span will be handled by checking if their tags are the same
            through <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.Equals(Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0},Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0})"/>.  This prevents us from having to
            define a suitable hashing strategy for all our tags.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.RecomputeTagsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Passed a boolean to say if we're computing the
            initial set of tags or not.  If we're computing the initial set of tags, we lower
            all our delays so that we can get results to the screen as quickly as possible.
            <para>This gives a good experience when a document is opened as the document appears complete almost
            immediately.  Once open though, our normal delays come into play so as to not cause a flashy experience.</para>
            </summary>
            <remarks>
            In the event of a cancellation request, this method may <em>either</em> return at the next availability
            or throw a cancellation exception.
            </remarks>
            <param name="highPriority">
            If this tagging request should be processed as quickly as possible with no extra delays added for it.
            </param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.ComputeDifference(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree{`0},Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree{`0})">
            <summary>
            Return all the spans that appear in only one of <paramref name="latestTree"/> or <paramref name="previousTree"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.TryGetTagIntervalTreeForBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns the TagSpanIntervalTree containing the tags for the given buffer. If no tags
            exist for the buffer at all, null is returned.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource._taggers">
            <summary>How many taggers are currently using us.</summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAggregateTagger`1">
            <summary>
            Base type of all taggers that wrap a set of other <paramref name="taggers"/>, presenting them all as if they were a
            single <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAggregateTagger`1.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Editor.Tagging.EfficientTagger{`0}})">
            <summary>
            Base type of all taggers that wrap a set of other <paramref name="taggers"/>, presenting them all as if they were a
            single <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAggregateTagger`1.Dispose">
            <summary>
            Disposes all the underlying taggers (if they themselves are <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAggregateTagger`1.TagsChanged">
            <summary>
            This tagger considers itself changed if any underlying taggers signal that they are changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.SimpleAggregateTagger`1">
            <summary>
            Simple tagger that aggregates the underlying taggers and presents them as a single event source and source of tags.
            The final set of tags produced by any <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.SimpleAggregateTagger`1.AddTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.CodeAnalysis.Collections.SegmentedList{Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0}})"/> request is just the aggregation of all the tags produced
            by the individual <paramref name="taggers"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.SimpleAggregateTagger`1.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Editor.Tagging.EfficientTagger{`0}})">
            <summary>
            Simple tagger that aggregates the underlying taggers and presents them as a single event source and source of tags.
            The final set of tags produced by any <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.SimpleAggregateTagger`1.AddTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.CodeAnalysis.Collections.SegmentedList{Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0}})"/> request is just the aggregation of all the tags produced
            by the individual <paramref name="taggers"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1">
            <summary>
            Base type for async taggers that perform their work based on what code is current visible in the user's
            viewport.  These taggers will compute tags for what is visible at their specified <see
            cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.EventChangeDelay"/>, but will also compute tags for the regions
            above and below that visible section at a delay of <see cref="F:Microsoft.CodeAnalysis.DelayTimeSpan.NonFocus"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.s_standardLineCountAroundViewportToTag">
            <summary>
            An amount of lines above/below the viewport that we will always tag, just to ensure that scrolling up/down a few
            lines shows immediate/accurate tags.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.Options">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.Options"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.TextChangeBehavior">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TextChangeBehavior"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.CreateEventSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.CreateEventSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.EventChangeDelay">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.EventChangeDelay"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.TagEquals(`0,`0)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagEquals(`0,`0)"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.SpanTrackingMode">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.SpanTrackingMode"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.SingleViewportTaggerProvider">
            <summary>
            Actual <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1"/> responsible for tagging a particular span (or spans)
            of the view.  Inherits all behavior of a normal view tagger, except for determining what spans to tag and what
            cadence to tag them at.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider`1.SingleViewportTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider{`0},Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewportTaggerProvider{`0}.ViewPortToTag,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener)">
            <summary>
            Actual <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1"/> responsible for tagging a particular span (or spans)
            of the view.  Inherits all behavior of a normal view tagger, except for determining what spans to tag and what
            cadence to tag them at.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousViewTaggerProvider`1">
            <summary>
            Base type for async taggers that need access to an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.  Used when a tagger needs things to
            operate like determining what is visible to the user, or where the caret is.
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.CompilationAvailableTaggerEventSource">
            <summary>
            Tagger event that fires once the compilation is available in the remote OOP process for a particular project.
            Used to trigger things such as:
            <list type="bullet">
            <item>reclassification pass as classification may show either cached classifications (from a  previous session),
            or incomplete classifications due to frozen-partial compilations being used.</item>
            <item>recomputation of navigation bar items due to frozen-partial compilations being used.</item>
            <item>recomputation of inheritance margin items due to frozen-partial compilations being used.</item>
            </list>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.CompilationAvailableTaggerEventSource._underlyingSource">
            <summary>
            Other event sources we're composing over.  If they fire, we should reclassify.  However, after they fire, we
            should also refire an event once we get the next full compilation ready.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.EfficientTagger`1">
            <summary>
            Root type of all roslyn <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> implementations.  This adds specialized hooks that allow for tags
            to be added to a preexisting list, rather than generating a fresh list instance.  This can help with avoiding
            garbage by allowing us to pool intermediary lists (especially as some high-level aggregating taggers defer to
            intermediary taggers).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.EfficientTagger`1.AddTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.CodeAnalysis.Collections.SegmentedList{Microsoft.VisualStudio.Text.Tagging.ITagSpan{`0}})">
            <summary>
            Produce the set of tags with the requested <paramref name="spans"/>, adding those tags to <paramref name="tags"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.EfficientTagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Default impl of the core <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/> interface.  Forces an allocation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource">
            <summary>
            The events that the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/> listens to, to know when 
            to request more tags.  For example, an <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> may listen to text 
            buffer changes, and can tell the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/> that it needs
            to recompute tags.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Connect">
            <summary>
            Let event source know that it should start sending out events.  Implementation can use
            that as a point to attach to events and perform other initialization. This will only be
            called once. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Disconnect">
            <summary>
            Let event source know that it is no longer needed.  Implementations can use this as a
            point to detach from events and perform other cleanup.  This will only be called once.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Pause">
            <summary>
            Pauses this event source and prevents it from firing the <see cref="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed"/> event. Can be called many
            times (but subsequence calls have no impact if already paused).  Must be called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Resume">
            <summary>
            Resumes this event source and allows firing the <see cref="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed"/> event. Can be called many times (but
            subsequence calls have no impact if already resumed).  Must be called on the UI thread.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed">
            <summary>
            An event has happened on the thing the tagger is attached to.  The tagger should
            recompute tags.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerCaretChangeBehavior">
            <summary>
            Flags that affect how the tagger infrastructure responds to caret changes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerCaretChangeBehavior.None">
            <summary>
            No special caret change behavior.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerCaretChangeBehavior.RemoveAllTagsOnCaretMoveOutsideOfTag">
            <summary>
            If the caret moves outside of a tag, immediately remove all existing tags.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1.TextChangeRange">
            <summary>
            The text that has changed between the last successful tagging and this new request to
            produce tags.  In order to be passed this value, <see cref="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.TrackTextChanges"/> 
            must be specified in <see cref="P:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TextChangeBehavior"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1.State">
            <summary>
            The state of the tagger.  Taggers can use this to keep track of information across calls
            to <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>.  Note: state will
            only be preserved if the tagger infrastructure fully updates itself with the tags that 
            were produced.  i.e. if that tagging pass is canceled, then the state set here will not
            be preserved and the previous preserved state will be used the next time ProduceTagsAsync
            is called.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1.SetSpansTagged(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.SnapshotSpan})">
            <summary>
            Used to allow taggers to indicate what spans were actually tagged.  This is useful when the tagger decides
            to tag a different span than the entire file.  If a sub-span of a document is tagged then the tagger
            infrastructure will keep previously computed tags from before and after the sub-span and merge them with the
            newly produced tags.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay">
            <summary>
            How quickly the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/> should update tags after
            receiving an <see cref="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed"/> notification.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.NearImmediate">
            <summary>
            Indicates that the tagger should retag after a short, but imperceptible delay.  This is
            for features that want to appear instantaneous to the user, but which can wait a short
            while until a batch of changes has occurred before processing.  Specifically, if a user
            expects the tag immediately after typing a character or moving the caret, then this
            delay should be used.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.Short">
            <summary>
            Not as fast as NearImmediate.  A user typing quickly or navigating quickly should not
            trigger this.  However, any sort of pause will cause it to trigger
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.Medium">
            <summary>
            Not as fast as 'Short'. The user's pause should be more significant until the tag
            appears.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.OnIdle">
            <summary>
            Indicates that the tagger should run when the user appears to be idle.  
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.NonFocus">
            <summary>
            Indicates that the tagger is not view, and should be on a very delayed update cadence.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs">
            <summary>
            Information provided to the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1"/> when 
            <see cref="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed"/> fires.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior">
            <summary>
            Flags that affect how the tagger infrastructure responds to text changes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.None">
            <summary>
            The async tagger infrastructure will not track any text changes and will not do 
            anything special in the presence of them.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.TrackTextChanges">
            <summary>
            The async tagger infrastructure will track text changes to the subject buffer it is 
            attached to.  The text changes will be provided to the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1"/>
            that is passed to <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.RemoveTagsThatIntersectEdits">
            <summary>
            The async tagger infrastructure will track text changes to the subject buffer it is 
            attached to.  The text changes will be provided to the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1"/>
            that is passed to <see cref="M:Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext{`0},System.Threading.CancellationToken)"/>.
            
            On any edit, tags that intersect the text change range will immediately removed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerTextChangeBehavior.RemoveAllTags">
            <summary>
            The async tagger infrastructure will track text changes to the subject buffer it is 
            attached to.
            
            On any edit all tags will we be removed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tags.ExportImageIdServiceAttribute">
            <summary>
            Use this attribute to declare an <see cref="T:Microsoft.CodeAnalysis.Editor.Tags.IImageIdService"/> implementation 
            so that it can be discovered by the host.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tags.ExportImageIdServiceAttribute.Name">
            <summary>
            The name of the <see cref="T:Microsoft.CodeAnalysis.Editor.Tags.IImageIdService"/>.  
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tags.IImageIdService">
            <summary>
            Extensibility point for hosts to display <see cref="T:Microsoft.VisualStudio.Core.Imaging.ImageId"/>s for items with Tags.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.TaskList.ITaskListProvider">
            <summary>
            Returns Roslyn todo list from the workspace.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.TaskList.ITaskListProvider.TaskListUpdated">
            <summary>
            An event that is raised when the todo list has changed.  
            
            When an event handler is newly added, this event will fire for the currently available todo items and then
            afterward for any changes since.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskList.TaskListUpdatedArgs.Solution">
            <summary>
            Solution this task items are associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskList.TaskListUpdatedArgs.TaskListItems">
            <summary>
            The task items associated with the ID.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskList.TaskListUpdatedArgs.DocumentId">
            <summary>
            <see cref="P:Microsoft.CodeAnalysis.Editor.TaskList.TaskListUpdatedArgs.DocumentId"/> this update is associated with.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.Extensions.OpenGlobalUndoTransaction(Microsoft.CodeAnalysis.Workspace,System.String,System.Boolean)">
            <summary>
            Create a global undo transaction for the given workspace. if the host doesn't support undo transaction,
            useFallback flag can be used to indicate whether it should fallback to base implementation or not.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService">
            <summary>
            This provides a way to do global undo. but semantic of the global undo is defined by the workspace host.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService.IsGlobalTransactionOpen(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Queries whether a global transaction is currently active.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService.CanUndo(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            query method that can answer whether global undo is supported by the workspace
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService.OpenGlobalUndoTransaction(Microsoft.CodeAnalysis.Workspace,System.String)">
            <summary>
            open global undo transaction for the workspace
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoService">
            <summary>
            A service that allows consumers to register undo transactions for a supplied
            <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> with a supplied description. The description is the
            display string by which the IDE's undo stack UI will subsequently refer to the transaction.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoService.RegisterUndoTransaction(Microsoft.CodeAnalysis.Text.SourceText,System.String)">
            <summary>
            Registers undo transaction for the supplied <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>.
            </summary>
            <param name="sourceText">The <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> for which undo transaction is being registered.</param>
            <param name="description">The display string by which the IDE's undo stack UI will subsequently refer to the transaction.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoService.BeginUndoTransaction(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Starts previously registered undo transaction for the supplied <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> (if any).
            </summary>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> for the <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> for undo transaction being started.</param>
            <remarks>
            This method will handle the translation from <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>
            and update the IDE's undo stack UI with the transaction's previously registered description string.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoService.EndUndoTransaction(Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoTransaction)">
            <summary>
            Completes and deletes the supplied undo transaction.
            </summary>
            <param name="transaction">The undo transaction that is being ended.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoTransaction">
            <summary>
            Represents undo transaction for a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/>
            with a display string by which the IDE's undo stack UI refers to the transaction.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoTransaction.SourceText">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Text.SourceText"/> for this undo transaction.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Undo.ISourceTextUndoTransaction.Description">
            <summary>
            The display string by which the IDE's undo stack UI refers to the transaction.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.IWorkspaceGlobalUndoTransaction">
            <summary>
            This represents workspace global undo transaction
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IWorkspaceGlobalUndoTransaction.AddDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            explicitly add a document to the global undo transaction
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IWorkspaceGlobalUndoTransaction.Commit">
            <summary>
            finish the undo transaction
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.NoOpGlobalUndoServiceFactory">
            <summary>
            This factory will create a service that provides workspace global undo service.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.NoOpGlobalUndoServiceFactory.NoOpUndoTransaction">
            <summary>
            null object that doesn't do anything
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.BraceMatching.BraceHighlightingViewTaggerProvider.GetAllMatchingBracesAsync(Microsoft.CodeAnalysis.BraceMatching.IBraceMatchingService,Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.BraceMatching.BraceMatchingOptions,System.Threading.CancellationToken)">
            <summary>
            Given code like   ()^()  (where ^ is the caret position), returns the two pairs of
            matching braces on the left and the right of the position.  Note: a brace matching
            pair is only returned if the position is on the left-side of hte start brace, or the
            right side of end brace.  So, for example, if you have (^()), then only the inner 
            braces are returned as the position is not on the right-side of the outer braces.
            
            This function also works for multi-character braces i.e.  ([  ])   In this case,
            the rule is that the position has to be on the left side of the start brace, or 
            inside the start brace (but not at the end).  So,    ^([   ])  will return this
            as a brace match, as will  (^[    ]).  But   ([^   ])  will not.
            
            The same goes for the braces on the the left of the caret.  i.e.:   ([   ])^
            will return the braces on the left, as will   ([   ]^).  But   ([   ^]) will not.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.CopyPasteAndPrintingClassificationBufferTaggerProvider">
            <summary>
            This is the tagger we use for buffer classification scenarios.  It is only used for 
            IAccurateTagger scenarios.  Namely: Copy/Paste and Printing.  We use an 'Accurate' buffer
            tagger since these features need to get classification tags for the entire file.
            
            i.e. if you're printing, you want semantic classification even for code that's not in view.
            The same applies to copy/pasting.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.CopyPasteAndPrintingClassificationBufferTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider,Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            This is the tagger we use for buffer classification scenarios.  It is only used for 
            IAccurateTagger scenarios.  Namely: Copy/Paste and Printing.  We use an 'Accurate' buffer
            tagger since these features need to get classification tags for the entire file.
            
            i.e. if you're printing, you want semantic classification even for code that's not in view.
            The same applies to copy/pasting.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.AbstractSemanticOrEmbeddedClassificationViewTaggerProvider">
            <summary>
            This is the tagger we use for view classification scenarios.  It is used for classifying code
            in the editor.  We use a view tagger so that we can only classify what's in view, and not
            the whole file.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.EmbeddedLanguageClassificationViewTaggerProvider">
            <summary>
            This is the tagger we use for classifying the embedded language string literals currently visible in the editor
            view.  Intentionally not exported.  It is consumed by the <see cref="T:Microsoft.CodeAnalysis.Classification.TotalClassificationTaggerProvider"/>
            instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.EmbeddedLanguageClassificationViewTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            This is the tagger we use for classifying the embedded language string literals currently visible in the editor
            view.  Intentionally not exported.  It is consumed by the <see cref="T:Microsoft.CodeAnalysis.Classification.TotalClassificationTaggerProvider"/>
            instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.SemanticClassificationViewTaggerProvider">
            <summary>
            This is the tagger we use for view classification scenarios.  It is used for classifying code in the editor.  We
            use a view tagger so that we can only classify what's in view, and not the whole file.  Intentionally not
            exported.  It is consumed by the <see cref="T:Microsoft.CodeAnalysis.Classification.TotalClassificationTaggerProvider"/> instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.SemanticClassificationViewTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            This is the tagger we use for view classification scenarios.  It is used for classifying code in the editor.  We
            use a view tagger so that we can only classify what's in view, and not the whole file.  Intentionally not
            exported.  It is consumed by the <see cref="T:Microsoft.CodeAnalysis.Classification.TotalClassificationTaggerProvider"/> instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider">
            <summary>
            Intentionally not exported.  It is consumed by the <see cref="T:Microsoft.CodeAnalysis.Classification.TotalClassificationTaggerProvider"/> instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            Intentionally not exported.  It is consumed by the <see cref="T:Microsoft.CodeAnalysis.Classification.TotalClassificationTaggerProvider"/> instead.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer">
            <summary>
            A classifier that operates only on the syntax of the source and not the semantics.  Note:
            this class operates in a hybrid sync/async manner.  Specifically, while classification
            happens synchronously, it may be synchronous over a parse tree which is out of date.  Then,
            asynchronously, we will attempt to get an up to date parse tree for the file. When we do, we
            will determine which sections of the file changed and we will use that to notify the editor
            about what needs to be reclassified.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer._workQueue">
            <summary>
            Work queue we use to batch up notifications about changes that will cause
            us to classify.  This ensures that if we hear a flurry of changes, we don't
            kick off an excessive amount of background work to process them.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer._diffTimeout">
            <summary>
            Timeout before we cancel the work to diff and return whatever we have.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer.ProcessChangesAsync(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{Microsoft.VisualStudio.Text.ITextSnapshot},System.Threading.CancellationToken)">
            <summary>
            Parses the document in the background and determines what has changed to report to
            the editor.  Calls to <see cref="M:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer.ProcessChangesAsync(Microsoft.CodeAnalysis.Collections.ImmutableSegmentedList{Microsoft.VisualStudio.Text.ITextSnapshot},System.Threading.CancellationToken)"/> are serialized by <see cref="T:Roslyn.Utilities.AsyncBatchingWorkQueue`1"/>
            so we don't need to worry about multiple calls to this happening concurrently.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer.LastLineCache">
            <summary>
            it is a helper class that encapsulates logic on holding onto last classification result
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Classification.SyntacticClassificationTaggerProvider.TagComputer.LastLineCache.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext)">
            <summary>
            it is a helper class that encapsulates logic on holding onto last classification result
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeActions.CodeActionEditHandlerService.ProcessOperationsAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeActions.CodeActionOperation},System.IProgress{Microsoft.CodeAnalysis.CodeAnalysisProgress},System.Threading.CancellationToken)">
            <returns><see langword="true"/> if all expected <paramref name="operations"/> are applied successfully;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeDefinitionWindow.DefinitionContextTracker">
            <summary>
            A type that tracks caret movements, and when you've been on an identifier for awhile, pushes the new
            code definition window context to the <see cref="T:Microsoft.CodeAnalysis.CodeDefinitionWindow.ICodeDefinitionWindowService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeDefinitionWindow.DefinitionContextTracker.#ctor(Microsoft.CodeAnalysis.MetadataAsSource.IMetadataAsSourceFileService,Microsoft.CodeAnalysis.CodeDefinitionWindow.ICodeDefinitionWindowService,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            A type that tracks caret movements, and when you've been on an identifier for awhile, pushes the new
            code definition window context to the <see cref="T:Microsoft.CodeAnalysis.CodeDefinitionWindow.ICodeDefinitionWindowService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeDefinitionWindow.DefinitionContextTracker.GetContextFromPointAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Internal for testing purposes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CommentSelection.Operation.Comment">
            <summary>
            The operation is a comment action.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CommentSelection.Operation.Uncomment">
            <summary>
            The operation is an uncomment action.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractCommentSelectionBase`1.ApplyEdits(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.String,Microsoft.CodeAnalysis.CommentSelection.CommentSelectionResult,System.Threading.CancellationToken)">
            <summary>
            Applies the requested edits and sets the selection.
            This operation is not cancellable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractCommentSelectionBase`1.CreateTrackingSpan(Microsoft.CodeAnalysis.CommentSelection.Operation,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a tracking span for the operation.
            Internal for tests.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractCommentSelectionBase`1.CreateSnapshotSpan(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.CodeAnalysis.CommentSelection.CommentTrackingSpan)">
            <summary>
            Retrieves the snapshot span from a post edited tracking span.
            Additionally applies any extra modifications to the tracking span post edit.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractCommentSelectionBase`1.DetermineSmallestIndent(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Given a set of lines, find the minimum indent of all of the non-blank, non-whitespace lines.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.GetBlockCommentsInDocument(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo,System.Threading.CancellationToken)">
            <summary>
            Retrieves data about the commented spans near the selection.
            </summary>
            <param name="document">the current document.</param>
            <param name="snapshot">the current text snapshot.</param>
            <param name="linesContainingSelections">
                a span that contains text from the first character of the first line in the selection(s)
                until the last character of the last line in the selection(s)
            </param>
            <param name="commentInfo">the comment information for the document.</param>
            <returns>any commented spans relevant to the selection in the document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.GetCaretLocationAfterToken(Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator,Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper)">
            <summary>
            Returns a caret location of itself or the location after the token the caret is inside of.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.AddBlockCommentWithIntersectingSpans(Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.CommentSelection.CommentTrackingSpan},Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo)">
            <summary>
            Adds a block comment when the selection already contains block comment(s).
            The result will be sequential block comments with the entire selection being commented out.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper._trimmedText">
            <summary>
            Trimmed text of the selection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.IsSpanWhitespace(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Determines if the given span is entirely whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.IsLocationCommented(System.Int32)">
            <summary>
            Determines if the location falls inside a commented span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.StartsWithAnyBlockCommentMarker(Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo)">
            <summary>
            Checks if the selection already starts with a comment marker.
            This prevents us from adding an extra marker.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.EndsWithAnyBlockCommentMarker(Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo)">
            <summary>
            Checks if the selection already ends with a comment marker.
            This prevents us from adding an extra marker.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.IsEntirelyCommented">
            <summary>
            Checks if the selected span contains any uncommented non whitespace characters.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.HasIntersectingBlockComments">
            <summary>
            Returns if the selection intersects with any block comments.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.TryGetBlockCommentOnSameLine(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Text.TextSpan@)">
            <summary>
            Tries to get a block comment on the same line.  There are two cases:
                1.  The caret is preceding a block comment on the same line, with only whitespace before the comment.
                2.  The caret is following a block comment on the same line, with only whitespace after the comment.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.GetIntersectingBlockComments(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Gets a list of block comments that intersect the span.
            Spans are intersecting if 1 location is the same between them (empty spans look at the start).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.AbstractToggleBlockCommentBase.BlockCommentSelectionHelper.GetUncommentedSpansInSelection">
            <summary>
            Retrieves all non commented, non whitespace spans.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CommentSelection.CommentSelectionResult.TextChanges">
            <summary>
            Text changes to make for this operation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CommentSelection.CommentSelectionResult.TrackingSpans">
            <summary>
            Tracking spans used to format and set the output selection after edits.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CommentSelection.CommentSelectionResult.ResultOperation">
            <summary>
            The type of text changes being made.
            This is known beforehand in some cases (comment selection)
            and determined after as a result in others (toggle comment).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CommentSelection.CommentTrackingSpan">
            <summary>
            Wrapper around a TextSpan that holds extra data used to create a tracking span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.ExecuteCommand(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CommentSelectionCommandArgs,Microsoft.VisualStudio.Commanding.CommandExecutionContext)">
            <summary>
            Comment the selected spans, and reset the selection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.ExecuteCommand(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.UncommentSelectionCommandArgs,Microsoft.VisualStudio.Commanding.CommandExecutionContext)">
            <summary>
            Uncomment the selected spans, and reset the selection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.CollectEdits(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.CommentSelection.ICommentSelectionService,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.CodeAnalysis.CommentSelection.Operation,System.Threading.CancellationToken)">
             <summary>
             Add the necessary edits to the given spans. Also collect tracking spans over each span.
            
             Internal so that it can be called by unit tests.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.CommentSpan(Microsoft.CodeAnalysis.CommentSelection.ICommentSelectionService,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.CommentSelection.CommentTrackingSpan})">
            <summary>
            Add the necessary edits to comment out a single span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.UncommentSpan(Microsoft.CodeAnalysis.CommentSelection.ICommentSelectionService,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.CommentSelection.CommentTrackingSpan})">
            <summary>
            Add the necessary edits to uncomment out a single span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.TryUncommentExactlyBlockComment(Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.CommentSelection.CommentTrackingSpan})">
            <summary>
            Check if the selected span matches an entire block comment.
            If it does, uncomment it and return true.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.ApplySingleLineCommentToNonBlankLines(Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Adds edits to comment out each non-blank line, at the given indent.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.DetermineFirstAndLastLine(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a span, find the first and last line that are part of the span.  NOTE: If the 
            span ends in column zero, we back up to the previous line, to handle the case where 
            the user used shift + down to select a bunch of lines.  They probably don't want the 
            last line commented in that case.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.CommentUncommentSelectionCommandHandler.SpanIncludesAllTextOnIncludedLines(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Returns true if the span includes all of the non-whitespace text on the first and last line.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CommentSelection.ToggleBlockCommentCommandHandler.GetBlockCommentsInDocument(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CommentSelection.CommentSelectionInfo,System.Threading.CancellationToken)">
            <summary>
            Gets block comments by parsing the text for comment markers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1">
            <summary>
            Base type of all diagnostic taggers (classification, squiggles, suggestions, inline-diags).  Subclasses can control
            things by overriding functionality in this type.  Internally, this will switch to either a pull or push cased
            approach at instantiation time depending on our internal feature flag.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1._diagnosticsTaggerProviders">
            <summary>
            Underlying diagnostic tagger responsible for the syntax/semantic and compiler/analyzer split.  The ordering of
            these taggers is not relevant.  They are not executed serially.  Rather, they all run concurrently, notifying us
            (potentially concurrently as well) when change occur.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1.GetLocationsToTag(Microsoft.CodeAnalysis.Diagnostics.DiagnosticData)">
            <summary>
            Get the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticDataLocation"/> that should have the tag applied to it.
            In most cases, this is the <see cref="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData.DataLocation"/> but overrides can change it (e.g. unnecessary classifications).
            </summary>
            <param name="diagnosticData">the diagnostic containing the location(s).</param>
            <returns>an array of locations that should have the tag applied.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1.SingleDiagnosticKindPullTaggerProvider">
            <summary>
            Low level tagger responsible for producing specific diagnostics tags for some feature for some particular <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticKind"/>.  It is itself never exported directly, but it it is used by the <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1"/> which aggregates its results and the results for all the other <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticKind"/> to produce all the diagnostics for that feature.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1.SingleDiagnosticKindPullTaggerProvider.#ctor(Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider{`0},Microsoft.CodeAnalysis.Diagnostics.DiagnosticKind,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener)">
            <summary>
            Low level tagger responsible for producing specific diagnostics tags for some feature for some particular <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticKind"/>.  It is itself never exported directly, but it it is used by the <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1"/> which aggregates its results and the results for all the other <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticKind"/> to produce all the diagnostics for that feature.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.AbstractDiagnosticsTaggerProvider`1.SingleDiagnosticKindPullTaggerProvider.CancelOnNewWork">
            <summary>
            When we hear about a new event cancel the costly work we're doing and compute against the latest snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTaggerProvider">
            <summary>
            Tagger for active statements. Active statements are only tracked for langauges that support EnC (C#, VB).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTaggerProvider.#ctor(Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            Tagger for active statements. Active statements are only tracked for langauges that support EnC (C#, VB).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingService">
            <summary>
            Tracks active statements for the debugger during an edit session.
            </summary>
            <remarks>
            An active statement is a source statement that occurs in a stack trace of a thread.
            Active statements are visualized via a gray marker in the text editor.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingService.#ctor(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener)">
            <summary>
            Tracks active statements for the debugger during an edit session.
            </summary>
            <remarks>
            An active statement is a source statement that occurs in a stack trace of a thread.
            Active statements are visualized via a gray marker in the text editor.
            </remarks>
        </member>
        <member name="E:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingService.TrackingChanged">
            <summary>
            Raised whenever span tracking starts or ends.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingService.TrackingSession._trackingSpans">
            <summary>
            Spans that are tracking active statements contained in the document of given file path.
            For each document the array contains spans for all active statements present in the file
            (even if they have been deleted, in which case the spans are empty).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingService.TrackingSession.GetSpansAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns location of the tracking spans in the specified <see cref="T:Microsoft.CodeAnalysis.Document"/> snapshot (#line target document).
            </summary>
            <returns>Empty array if tracking spans are not available for the document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingService.TrackingSession.GetAdjustedTrackingSpansAsync(Microsoft.CodeAnalysis.TextDocument,Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <summary>
            Updates tracking spans with the latest positions of all active statements in the specified document snapshot (#line target document) and returns them.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementTrackingSpan.IsLeaf">
            <summary>
            True if at least one of the threads whom this active statement belongs to is in a leaf frame.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.DebuggerContractVersionCheck">
            <summary>
            Allow us to run integration tests on older VS than build that has the required version of Microsoft.VisualStudio.Debugger.Contracts.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueLanguageService.StartSessionAsync(System.Threading.CancellationToken)">
            <summary>
            Called by the debugger when a debugging session starts and managed debugging is being used.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueLanguageService.HasChangesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns true if any changes have been made to the source since the last changes had been applied.
            For performance reasons it only implements a heuristic and may return both false positives and false negatives.
            If the result is a false negative the debugger will not apply the changes unless the user explicitly triggers apply change command.
            The background diagnostic analysis will still report rude edits for these ignored changes. It may also happen that these rude edits 
            will disappear once the debuggee is resumed - if they are caused by presence of active statements around the change.
            If the result is a false positive the debugger attempts to apply the changes, which will result in a delay but will correctly end up
            with no actual deltas to be applied.
            
            If <paramref name="sourceFilePath"/> is specified checks for changes only in a document of the given path.
            This is not supported (returns false) for source-generated documents.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueUIContext.EncCapableProjectExistsInWorkspaceUIContextString">
            <summary>
            Context id that indicates that primary workspace contains a project that supports Edit and Continue.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.TrackingChanged">
            <summary>
            Triggered when tracking spans have changed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.GetSpansAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns location of the tracking spans in the specified document snapshot (#line target document).
            </summary>
            <returns>Empty array if tracking spans are not available for the document.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.GetAdjustedTrackingSpansAsync(Microsoft.CodeAnalysis.TextDocument,Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <summary>
            Updates tracking spans with the latest positions of all active statements in the specified document snapshot (#line target document) and returns them.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.IEditAndContinueSolutionProvider">
            <summary>
            Retrieves the <see cref="T:Microsoft.CodeAnalysis.Solution"/> snapshot that corresponds to the current state of the debuggee.
            This snapshot contains changes successfully applied during EnC/Hot Reload.
            </summary>
            <remarks>
            This is temporarily available to in-proc XAML External Access APIs and should be revisited once XAML moves to OOP LSP.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.PdbMatchingSourceTextProvider">
            <summary>
            Notifies EnC service of host workspace events.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.PdbMatchingSourceTextProvider.SetBaseline(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Establish a baseline snapshot. The listener will ignore all document snapshots that are older.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntelliCodeArgumentDefaultsSource">
            <summary>
            Provides a list of possible default arguments for method calls.
            </summary>
            <remarks>
            This is a MEF component and should be exported with <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute"/> and <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> attributes
            and optional <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/> and <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute"/> attributes.
            An instance of <see cref="T:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntelliCodeArgumentDefaultsSource"/> is selected
            first by matching ContentType with content type of the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer"/>, and then by order.
            Only one <see cref="T:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntelliCodeArgumentDefaultsSource"/> is used in a given view.
            <para>
            Only one <see cref="T:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntelliCodeArgumentDefaultsSource"/> will used for any given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. The sources are
            ordered by the Order attribute. The first source (if any) that satisfies the ContentType and TextViewRoles
            attributes will be the source used to provide defaults.
            </para>
            <example>
            <code>
                [Export(typeof(IIntelliCodeArgumentDefaultsSource))]
                [Name(nameof(IntelliCodeArgumentDefaultsSource))]
                [ContentType("text")]
                [TextViewRoles(PredefinedTextViewRoles.Editable)]
                [Order(Before = "OtherCompletionDefaultsSource")]
                public class IntelliCodeArgumentDefaultsSource : IIntelliCodeArgumentDefaultsSource
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntelliCodeArgumentDefaultsSource.GetArgumentDefaultsAsync(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets a list of possible default arguments for a method signature.
            </summary>
            <param name="view">View for which the defaults are desired.</param>
            <returns>A list of possible default arguments for a method signature.</returns>
            <remarks>
            <para>The returned value will always be in the form of a "complete" set of arguments, including the leading and trailing parenthesis.</para>
            <para>For example:
            <code>
            ()
            (args[0])
            (args.Length)
            (value: args.Length)
            </code>
            </para>
            <para>Some of the proposals may be syntactically/semantically invalid (and can be ignored by the caller).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntentSourceProvider.ComputeIntentsAsync(Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext,System.Threading.CancellationToken)">
            <summary>
            For an input intent, computes the edits required to apply that intent and returns them.
            </summary>
            <param name="context">the intents with the context in which the intent was found.</param>
            <returns>the edits that should be applied to the current snapshot.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext">
            <summary>
            Defines the data needed to compute the code action edits from an intent.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.#ctor(System.String,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.Text.TextSpan,System.String)">
            <summary>
            Defines the data needed to compute the code action edits from an intent.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.IntentName">
            <summary>
            The intent name.  <see cref="T:Microsoft.CodeAnalysis.Features.Intents.WellKnownIntents"/> contains all intents roslyn knows how to handle.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.IntentData">
            <summary>
            JSON formatted data specific to the intent that must be deserialized into the appropriate object.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.CurrentSnapshotSpan">
            <summary>
            The text snapshot and selection when <see cref="M:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IIntentSourceProvider.ComputeIntentsAsync(Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext,System.Threading.CancellationToken)"/>
            was called to compute the text edits and against which the resulting text edits will be calculated.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.PriorTextEdits">
            <summary>
            The text edits that should be applied to the <see cref="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.CurrentSnapshotSpan"/> to calculate
            a prior text snapshot before the intent happened.  The snapshot is used to calculate the actions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.PriorSelection">
            <summary>
            The caret position / selection in the snapshot calculated by applying
            <see cref="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.PriorTextEdits"/> to the <see cref="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentRequestContext.CurrentSnapshotSpan"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentSource">
            <summary>
            Defines the text changes needed to apply an intent.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentSource.#ctor(System.String,System.String,System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextChange}})">
            <summary>
            Defines the text changes needed to apply an intent.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentSource.Title">
            <summary>
            The title associated with this intent result.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentSource.DocumentChanges">
            <summary>
            The text changes that should be applied to each document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.IntelliCode.Api.IntentSource.ActionName">
            <summary>
            Contains metadata that can be used to identify the kind of sub-action these edits
            apply to for the requested intent.  Used for telemetry purposes only.
            For example, the code action type name like FieldDelegatingCodeAction.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.AbstractVSTypeScriptRequestHandler`2">
            <summary>
            Request handler type exposed to typescript.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.TypeScriptTextDocumentIdentifier">
            <summary>
            Custom type containing information in a <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContext"/> to avoid coupling LSP protocol versions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.TypeScriptTextDocumentIdentifier.#ctor(System.Uri,System.String)">
            <summary>
            Custom type containing information in a <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContext"/> to avoid coupling LSP protocol versions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptCapabilitiesProvider.GetServerCapabilities(System.String)">
            <summary>
            Returns the <see cref="T:Roslyn.LanguageServer.Protocol.ClientCapabilities"/> provided by typescript.
            This is specified as a string to allow us and TS to depend on different versions of the
            LSP protocol definitions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptEditorInlineRenameServiceImplementation">
            <summary>
            Language service that allows a language to participate in the editor's inline rename feature.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesContext.ProgressTracker">
            <summary>
            Used for clients that are finding usages to push information about how far along they
            are in their search.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesContext.ReportMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Report a message to be displayed to the user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesContext.SetSearchTitleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Set the title of the window that results are displayed in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesService.FindReferencesAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesContext,System.Threading.CancellationToken)">
            <summary>
            Finds the references for the symbol at the specific position in the document,
            pushing the results into the context instance.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesService.FindImplementationsAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFindUsagesContext,System.Threading.CancellationToken)">
            <summary>
            Finds the implementations for the symbol at the specific position in the document,
            pushing the results into the context instance.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFormattingInteractionService.SupportsFormattingOnTypedCharacter(Microsoft.CodeAnalysis.Document,System.Char)">
            <summary>
            True if this service would like to format the document based on the user typing the
            provided character.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFormattingInteractionService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.DocumentOptionSet,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document.  If "textSpan" is provided,
            only the text changes necessary to format that span are needed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFormattingInteractionService.GetFormattingChangesOnPasteAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.DocumentOptionSet,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document on paste operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFormattingInteractionService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,System.Char,System.Int32,Microsoft.CodeAnalysis.Options.DocumentOptionSet,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a 
            character.  The position provided is the position of the caret in the document after
            the character been inserted into the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptFormattingInteractionService.GetFormattingChangesOnReturnAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Options.DocumentOptionSet,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a Return
            The position provided is the position of the caret in the document after Return.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptInlineRenameLocationSet.Locations">
            <summary>
            The set of locations that need to be updated with the replacement text that the user
            has entered in the inline rename session.  These are the locations are all relative
            to the solution when the inline rename session began.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptInlineRenameLocationSet.GetReplacementsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the set of replacements and their possible resolutions if the user enters the
            provided replacement text and options.  Replacements are keyed by their document id
            and TextSpan in the original solution, and specify their new span and possible conflict
            resolution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptInlineRenameReplacementInfo.NewSolution">
            <summary>
            The solution obtained after resolving all conflicts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptInlineRenameReplacementInfo.ReplacementTextValid">
            <summary>
            Whether or not the replacement text entered by the user is valid.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptInlineRenameReplacementInfo.DocumentIds">
            <summary>
            The documents that need to be updated.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptInlineRenameReplacementInfo.GetReplacements(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Returns all the replacements that need to be performed for the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptLanguageDebugInfoServiceImplementation.GetDataTipInfoAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find an appropriate span to pass the debugger given a point in a snapshot.  Optionally
            pass back a string to pass to the debugger instead if no good span can be found.  For
            example, if the user hovers on "var" then we actually want to pass the fully qualified
            name of the type that 'var' binds to, to the debugger.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.VSTypeScriptWellKnownSymbolTypes.Definition">
            <summary>
            Exists for binary compat.  Not actually used for any purpose.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.VSTypeScriptInProcLanguageClient">
            <summary>
            Language client to handle TS LSP requests.
            Allows us to move features to LSP without being blocked by TS as well
            as ensures that TS LSP features use correct solution snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.VSTypeScriptInProcLanguageClient.#ctor(Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.Api.IVSTypeScriptCapabilitiesProvider,Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.VSTypeScriptLspServiceProvider,Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.CodeAnalysis.LanguageServer.ILspServiceLoggerFactory,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.VisualStudio.Composition.ExportProvider)">
            <summary>
            Language client to handle TS LSP requests.
            Allows us to move features to LSP without being blocked by TS as well
            as ensures that TS LSP features use correct solution snapshots.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.VSTypeScript.VSTypeScriptInProcLanguageClient.ShowNotificationOnInitializeFailed">
            <summary>
            When pull diagnostics is enabled, ensure that initialization failures are displayed to the user as
            they will get no diagnostics.  When not enabled we don't show the failure box (failure will still be recorded in the task status center)
            as the failure is not catastrophic.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindUsages.BufferedFindUsagesContext">
            <summary>
            An impl of <see cref="T:Microsoft.CodeAnalysis.FindUsages.IFindUsagesContext"/> that will buffer results internally to either be shown to the 
            user immediately if the find command completes quickly, or which will be pushed into the streaming presenter 
            if the search is taking too long.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.FindUsages.BufferedFindUsagesContext.#ctor(Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            An impl of <see cref="T:Microsoft.CodeAnalysis.FindUsages.IFindUsagesContext"/> that will buffer results internally to either be shown to the 
            user immediately if the find command completes quickly, or which will be pushed into the streaming presenter 
            if the search is taking too long.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindUsages.BufferedFindUsagesContext._gate">
            <summary>
            Lock which controls access to all members below.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindUsages.BufferedFindUsagesContext._streamingPresenterContext">
            <summary>
            The underlying presenter context to forward messages to once the presenter is opened.  Prior to having 
            this, we will buffer the results within ourselves.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.FindUsages.BufferedFindUsagesContext._state">
            <summary>
            Values we buffer inside ourselves until <see cref="F:Microsoft.CodeAnalysis.FindUsages.BufferedFindUsagesContext._streamingPresenterContext"/> is non-null.  Once non-null,
            we'll push the values into it and forward all future calls from that point to it.
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.IFormattingInteractionService.SupportsFormattingOnTypedCharacter(Microsoft.CodeAnalysis.Document,System.Char)">
            <summary>
            True if this service would like to format the document based on the user typing the
            provided character.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.IFormattingInteractionService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextBuffer,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document. If <paramref name="textSpan"/> is provided,
            only the text changes necessary to format that span are needed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.IFormattingInteractionService.GetFormattingChangesOnPasteAsync(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document on paste operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.IFormattingInteractionService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextBuffer,System.Char,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a 
            character.  The position provided is the position of the caret in the document after
            the character been inserted into the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Formatting.IFormattingInteractionService.GetFormattingChangesOnReturnAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a Return
            The position provided is the position of the caret in the document after Return.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.GoToDefinition.AbstractGoToCommandHandler`2._inProgressCommand">
            <summary>
            The current go-to command that is in progress.  Tracked so that if we issue multiple find-impl commands that
            they properly run after each other.  This is necessary so none of them accidentally stomp on one that is still
            in progress and is interacting with the UI.  Only valid to read or write to this on the UI thread.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.GoToDefinition.AbstractGoToCommandHandler`2._cancellationTokenSource">
            <summary>
            CancellationToken governing the current <see cref="F:Microsoft.CodeAnalysis.GoToDefinition.AbstractGoToCommandHandler`2._inProgressCommand"/>.  Only valid to read or write to this
            on the UI thread.
            </summary>
            <remarks>
            Cancellation is complicated with this feature.  There are two things that can cause us to cancel.  The first is
            if the user kicks off another actual go-to-impl command.  In that case, we just attempt to cancel the prior
            command (if it is still running), then wait for it to complete, then run our command.  The second is if we have
            switched over to the streaming presenter and then the user starts some other command (like FAR) that takes over
            the presenter.  In that case, the presenter will notify us that it has be re-purposed and we will also cancel
            this source.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.GoToDefinition.AbstractGoToCommandHandler`2._delayHook">
            <summary>
            This hook allows for stabilizing the asynchronous nature of this command handler for integration testing.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Interactive.ExecuteInInteractiveCommandHandler">
            <summary>
            Implements a execute in interactive command handler.
            This class is separated from the <see cref="T:Microsoft.CodeAnalysis.Interactive.IExecuteInInteractiveCommandHandler"/>
            in order to ensure that the interactive command can be exposed without the necessity
            to load any of the interactive dll files just to get the command's status.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.ExecuteInInteractiveCommandHandler.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.CodeAnalysis.Interactive.IExecuteInInteractiveCommandHandler,Microsoft.CodeAnalysis.Editor.ContentTypeMetadata}})">
            <summary>
            Implements a execute in interactive command handler.
            This class is separated from the <see cref="T:Microsoft.CodeAnalysis.Interactive.IExecuteInInteractiveCommandHandler"/>
            in order to ensure that the interactive command can be exposed without the necessity
            to load any of the interactive dll files just to get the command's status.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Interactive.IExecuteInInteractiveCommandHandler">
            <summary>
            Interface for the ExecuteInInteractiveCommand handler.
            Ensures that the command handler can be exported via MEF
            without actually being instantiated as all other command handlers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Interactive.InteractiveSession._hostDirectory">
            <summary>
            The top level directory where all the interactive host extensions are installed (both Core and Desktop).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Interactive.InteractiveSession._pendingBuffers">
            <summary>
            Buffers that need to be associated with a submission project once the process initialization completes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.InteractiveSession.ProcessInitialized(Microsoft.CodeAnalysis.Interactive.InteractiveHostPlatformInfo,Microsoft.CodeAnalysis.Interactive.InteractiveHostOptions,Microsoft.CodeAnalysis.Interactive.RemoteExecutionResult)">
            <summary>
            Invoked by <see cref="T:Microsoft.CodeAnalysis.Interactive.InteractiveHost"/> when a new process initialization completes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.InteractiveSession.AddSubmissionProject(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Invoked on UI thread when a new language buffer is created and before it is added to the projection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.InteractiveSession.ExecuteCodeAsync(System.String)">
            <summary>
            Called once a code snippet is submitted.
            Followed by creation of a new language buffer and call to <see cref="M:Microsoft.CodeAnalysis.Interactive.InteractiveSession.AddSubmissionProject(Microsoft.VisualStudio.Text.ITextBuffer)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.InteractiveWorkspace.ResetSolution">
            <summary>
            Closes all open documents and empties the solution but keeps all solution-level analyzers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Interactive.AbstractSendToInteractiveSubmissionProvider">
             <summary>
             Implementers of this interface are responsible for retrieving source code that
             should be sent to the REPL given the user's selection.
            
             If the user does not make a selection then a line should be selected.
             If the user selects code that fails to be parsed then the selection gets expanded
             to a syntax node.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.AbstractSendToInteractiveSubmissionProvider.GetExecutableSyntaxTreeNodeSelection(Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>Expands the selection span of an invalid selection to a span that should be sent to REPL.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.AbstractSendToInteractiveSubmissionProvider.CanParseSubmission(System.String)">
            <summary>Returns whether the submission can be parsed in interactive.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.AbstractSendToInteractiveSubmissionProvider.GetExpandedLine(Microsoft.VisualStudio.Text.Editor.IEditorOptions,Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs,System.Threading.CancellationToken)">
            <summary>Returns the span for the selected line. Extends it if it is a part of a multi line statement or declaration.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Interactive.AbstractSendToInteractiveSubmissionProvider.GetSelectedLine(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>Returns the span for the currently selected line.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.AbstractDefinitionLocationService.GetAlternativeLocationIfAlreadyOnDefinitionAsync(Microsoft.CodeAnalysis.Project,System.Int32,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Attempts to find a better definition for the symbol, if the user is already on the definition of it.
            </summary>
            <param name="project">The project context to use for finding symbols</param>
            <param name="originalDocument">The document the user is navigating from. This may not be part of the project supplied.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.EditorOptionsService">
            <summary>
            Aggregates services necessary to retrieve editor options.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.EditorOptionsService.#ctor(Microsoft.CodeAnalysis.Options.IGlobalOptionService,Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService,Microsoft.VisualStudio.Text.Editor.IIndentationManagerService)">
            <summary>
            Aggregates services necessary to retrieve editor options.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.LegacyGlobalOptionsWorkspaceService">
            <summary>
            Enables legacy APIs to access global options from workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.LegacyGlobalOptionsWorkspaceService.#ctor(Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            Enables legacy APIs to access global options from workspace.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.SolutionChecksumUpdater">
            <summary>
            This class runs against the in-process workspace, and when it sees changes proactively pushes them to
            the out-of-process workspace through the <see cref="T:Microsoft.CodeAnalysis.Remote.IRemoteAssetSynchronizationService"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.SolutionChecksumUpdater._globalOperationService">
            <summary>
            We're not at a layer where we are guaranteed to have an IGlobalOperationNotificationService.  So allow for
            it being null.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.SolutionChecksumUpdater._textChangeQueue">
            <summary>
            Queue to push out text changes in a batched fashion when we hear about them.  Because these should be short
            operations (only syncing text changes) we don't cancel this when we enter the paused state.  We simply don't
            start queuing more requests into this until we become unpaused.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Remote.SolutionChecksumUpdater._synchronizeWorkspaceQueue">
            <summary>
            Queue for kicking off the work to synchronize the primary workspace's solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Workspaces.AbstractTextBufferVisibilityTracker`2.VisibleTrackerData.Callbacks">
            <summary>
            The callbacks that want to be notified when our <see cref="F:Microsoft.CodeAnalysis.Workspaces.AbstractTextBufferVisibilityTracker`2.VisibleTrackerData.TextViews"/> change visibility.  Stored as an
            <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/> so we can enumerate it safely without it changing underneath us.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker">
            <summary>
            All methods must be called on UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker.IsVisible(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Whether or not this text buffer is in an actively visible <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker.RegisterForVisibilityChanges(Microsoft.VisualStudio.Text.ITextBuffer,System.Action)">
            <summary>
            Registers to hear about visibility changes for this particular buffer.  Note: registration will not trigger
            a call to <paramref name="callback"/>.  If clients need that information, they should check the <see
            cref="M:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker.IsVisible(Microsoft.VisualStudio.Text.ITextBuffer)"/> state of the <paramref name="subjectBuffer"/> themselves.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker.UnregisterForVisibilityChanges(Microsoft.VisualStudio.Text.ITextBuffer,System.Action)">
            <summary>
            Unregister equivalent of <see cref="M:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker.RegisterForVisibilityChanges(Microsoft.VisualStudio.Text.ITextBuffer,System.Action)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTrackerExtensions.DelayWhileNonVisibleAsync(Microsoft.CodeAnalysis.Workspaces.ITextBufferVisibilityTracker,Microsoft.CodeAnalysis.Editor.Shared.Utilities.IThreadingContext,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener,Microsoft.VisualStudio.Text.ITextBuffer,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits the specified amount of time while the specified <paramref name="subjectBuffer"/> is not visible.  If
            any document visibility changes happen, the delay will cancel.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preprocessor_Text">
            <summary>Preprocessor Text</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Punctuation">
            <summary>Punctuation</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Classes">
            <summary>User Types - Classes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Delegates">
            <summary>User Types - Delegates</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Enums">
            <summary>User Types - Enums</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Interfaces">
            <summary>User Types - Interfaces</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Structures">
            <summary>User Types - Structures</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Type_Parameters">
            <summary>User Types - Type Parameters</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.String_Verbatim">
            <summary>String - Verbatim</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Attribute_Name">
            <summary>XML Doc Comments - Attribute Name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_CData_Section">
            <summary>XML Doc Comments - CData Section</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Text">
            <summary>XML Doc Comments - Text</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Delimiter">
            <summary>XML Doc Comments - Delimiter</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Comment">
            <summary>XML Doc Comments - Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Modules">
            <summary>User Types - Modules</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Attribute_Name">
            <summary>VB XML Literals - Attribute Name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Attribute_Quotes">
            <summary>VB XML Literals - Attribute Quotes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Attribute_Value">
            <summary>VB XML Literals - Attribute Value</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_CData_Section">
            <summary>VB XML Literals - CData Section</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Comment">
            <summary>VB XML Literals - Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Delimiter">
            <summary>VB XML Literals - Delimiter</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Embedded_Expression">
            <summary>VB XML Literals - Embedded Expression</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Entity_Reference">
            <summary>VB XML Literals - Entity Reference</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Name">
            <summary>VB XML Literals - Name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Processing_Instruction">
            <summary>VB XML Literals - Processing Instruction</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.VB_XML_Literals_Text">
            <summary>VB XML Literals - Text</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Attribute_Quotes">
            <summary>XML Doc Comments - Attribute Quotes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Attribute_Value">
            <summary>XML Doc Comments - Attribute Value</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Unnecessary_Code">
            <summary>Unnecessary Code</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rude_Edit">
            <summary>Rude Edit</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_will_update_1_reference_in_1_file">
            <summary>Rename will update 1 reference in 1 file.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_will_update_0_references_in_1_file">
            <summary>Rename will update {0} references in 1 file.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_will_update_0_references_in_1_files">
            <summary>Rename will update {0} references in {1} files.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_conflict_s_will_be_resolved">
            <summary>{0} conflict(s) will be resolved</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_unresolvable_conflict_s">
            <summary>{0} unresolvable conflict(s)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Applying_0">
            <summary>Applying "{0}"...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Adding_0_to_1_with_content_colon">
            <summary>Adding '{0}' to '{1}' with content:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Adding_project_0">
            <summary>Adding project '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Removing_project_0">
            <summary>Removing project '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Changing_project_references_for_0">
            <summary>Changing project references for '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Adding_reference_0_to_1">
            <summary>Adding reference '{0}' to '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Removing_reference_0_from_1">
            <summary>Removing reference '{0}' from '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Adding_analyzer_reference_0_to_1">
            <summary>Adding analyzer reference '{0}' to '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Removing_analyzer_reference_0_from_1">
            <summary>Removing analyzer reference '{0}' from '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_End_Tag_Completion">
            <summary>XML End Tag Completion</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Completing_Tag">
            <summary>Completing Tag</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Encapsulate_Field">
            <summary>Encapsulate Field</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Applying_Encapsulate_Field_refactoring">
            <summary>Applying "Encapsulate Field" refactoring...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Please_select_the_definition_of_the_field_to_encapsulate">
            <summary>Please select the definition of the field to encapsulate.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Given_Workspace_doesn_t_support_Undo">
            <summary>Given Workspace doesn't support Undo</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Searching">
            <summary>Searching...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Canceled">
            <summary>Canceled.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.No_information_found">
            <summary>No information found.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.No_usages_found">
            <summary>No usages found.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Implements_">
            <summary>Implements</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Implemented_By">
            <summary>Implemented By</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Overrides_">
            <summary>Overrides</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Overridden_By">
            <summary>Overridden By</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Directly_Called_In">
            <summary>Directly Called In</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Indirectly_Called_In">
            <summary>Indirectly Called In</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Called_In">
            <summary>Called In</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Referenced_In">
            <summary>Referenced In</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.No_references_found">
            <summary>No references found.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.No_derived_types_found">
            <summary>No derived types found.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.No_implementations_found">
            <summary>No implementations found.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_Line_1">
            <summary>{0} - (Line {1})</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Class_Parts">
            <summary>Class Parts</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Struct_Parts">
            <summary>Struct Parts</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Interface_Parts">
            <summary>Interface Parts</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Type_Parts">
            <summary>Type Parts</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inherits_">
            <summary>Inherits</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inherited_By">
            <summary>Inherited By</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Already_tracking_document_with_identical_key">
            <summary>Already tracking document with identical key</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.document_is_not_currently_being_tracked">
            <summary>document is not currently being tracked</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Computing_Rename_information">
            <summary>Computing Rename information...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Updating_files">
            <summary>Updating files...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_operation_was_cancelled_or_is_not_valid">
            <summary>Rename operation was cancelled or is not valid</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_Symbol">
            <summary>Rename Symbol</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Text_Buffer_Change">
            <summary>Text Buffer Change</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_operation_was_not_properly_completed_Some_file_might_not_have_been_updated">
            <summary>Rename operation was not properly completed. Some file might not have been updated.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_0_to_1">
            <summary>Rename '{0}' to '{1}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preview_Warning">
            <summary>Preview Warning</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Automatic_Line_Ender">
            <summary>Automatic Line Ender</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Automatically_completing">
            <summary>Automatically completing...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Automatic_Pair_Completion">
            <summary>Automatic Pair Completion</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.An_active_inline_rename_session_is_still_active_Complete_it_before_starting_a_new_one">
            <summary>An active inline rename session is still active. Complete it before starting a new one.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_buffer_is_not_part_of_a_workspace">
            <summary>The buffer is not part of a workspace.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_token_is_not_contained_in_the_workspace">
            <summary>The token is not contained in the workspace.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.You_cannot_rename_this_element_because_it_is_contained_in_a_read_only_file">
            <summary>You cannot rename this element because it is contained in a read-only file.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.You_cannot_rename_this_element_because_it_is_in_a_location_that_cannot_be_navigated_to">
            <summary>You cannot rename this element because it is in a location that cannot be navigated to.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Navigation_Bars">
            <summary>Navigation Bars</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Refreshing_navigation_bars">
            <summary>Refreshing navigation bars...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Format_Token">
            <summary>Format Token</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Find_References">
            <summary>Find References</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_references">
            <summary>Finding references...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_references_of_0">
            <summary>Finding references of "{0}"...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Comment_Selection">
            <summary>Comment Selection</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Uncomment_Selection">
            <summary>Uncomment Selection</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Commenting_currently_selected_text">
            <summary>Commenting currently selected text...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Uncommenting_currently_selected_text">
            <summary>Uncommenting currently selected text...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Insert_new_line">
            <summary>Insert new line</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Documentation_Comment">
            <summary>Documentation Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inserting_documentation_comment">
            <summary>Inserting documentation comment...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Extract_Method">
            <summary>Extract Method</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Applying_Extract_Method_refactoring">
            <summary>Applying "Extract Method" refactoring...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Format_Document">
            <summary>Format Document</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Formatting_document">
            <summary>Formatting document...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Formatting">
            <summary>Formatting</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Format_Selection">
            <summary>Format Selection</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Formatting_currently_selected_text">
            <summary>Formatting currently selected text...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Cannot_navigate_to_the_symbol_under_the_caret">
            <summary>Cannot navigate to the symbol under the caret.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Go_to_Definition">
            <summary>Go to Definition</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Navigating_to_definition">
            <summary>Navigating to definition...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Organize_Document">
            <summary>Organize Document</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Organizing_document">
            <summary>Organizing document...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Highlighted_Definition">
            <summary>Highlighted Definition</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_new_name_is_not_a_valid_identifier">
            <summary>The new name is not a valid identifier.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Rename_Fixup">
            <summary>Inline Rename Fixup</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Rename_Resolved_Conflict">
            <summary>Inline Rename Resolved Conflict</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Rename">
            <summary>Inline Rename</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename">
            <summary>Rename</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Start_Rename">
            <summary>Start Rename</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Display_conflict_resolutions">
            <summary>Display conflict resolutions</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_token_to_rename">
            <summary>Finding token to rename...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Conflict">
            <summary>Conflict</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Text_Navigation">
            <summary>Text Navigation</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_word_extent">
            <summary>Finding word extent...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_enclosing_span">
            <summary>Finding enclosing span...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_span_of_next_sibling">
            <summary>Finding span of next sibling...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Finding_span_of_previous_sibling">
            <summary>Finding span of previous sibling...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_colon_0">
            <summary>Rename: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Light_bulb_session_is_already_dismissed">
            <summary>Light bulb session is already dismissed.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Automatic_Pair_Completion_End_Point_Marker_Color">
            <summary>Automatic Pair Completion End Point Marker Color</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Engine_must_be_attached_to_an_Interactive_Window">
            <summary>Engine must be attached to an Interactive Window.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Changes_the_current_prompt_settings">
            <summary>Changes the current prompt settings.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Unexpected_text_colon_0">
            <summary>Unexpected text: '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_triggerSpan_is_not_included_in_the_given_workspace">
            <summary>The triggerSpan is not included in the given workspace.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.This_session_has_already_been_dismissed">
            <summary>This session has already been dismissed.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_transaction_is_already_complete">
            <summary>The transaction is already complete.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Not_a_source_error_line_column_unavailable">
            <summary>Not a source error, line/column unavailable</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Can_t_compare_positions_from_different_text_snapshots">
            <summary>Can't compare positions from different text snapshots</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Entity_Reference">
            <summary>XML Doc Comments - Entity Reference</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Name">
            <summary>XML Doc Comments - Name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.XML_Doc_Comments_Processing_Instruction">
            <summary>XML Doc Comments - Processing Instruction</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Active_Statement">
            <summary>Active Statement</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Loading_Peek_information">
            <summary>Loading Peek information...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Peek">
            <summary>Peek</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Apply1">
            <summary>_Apply</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Include_overload_s">
            <summary>Include _overload(s)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Include_comments">
            <summary>Include _comments</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Include_strings">
            <summary>Include _strings</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Apply2">
            <summary>Apply</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Change_Signature">
            <summary>Change Signature</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preview_Changes_0">
            <summary>Preview Changes - {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preview_Code_Changes_colon">
            <summary>Preview Code Changes:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preview_Changes">
            <summary>Preview Changes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Format_Paste">
            <summary>Format Paste</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Formatting_pasted_text">
            <summary>Formatting pasted text...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_definition_of_the_object_is_hidden">
            <summary>The definition of the object is hidden.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Automatic_Formatting">
            <summary>Automatic Formatting</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Extract_method_encountered_the_following_issues">
            <summary>Extract method encountered the following issues:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Do_you_still_want_to_proceed_This_may_produce_broken_code">
            <summary>Do you still want to proceed? This may produce broken code.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.We_can_fix_the_error_by_not_making_struct_out_ref_parameter_s_Do_you_want_to_proceed">
            <summary>We can fix the error by not making struct "out/ref" parameter(s).
            Do you want to proceed?</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Change_Signature_colon">
            <summary>Change Signature:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_0_to_1_colon">
            <summary>Rename '{0}' to '{1}':</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Encapsulate_Field_colon">
            <summary>Encapsulate Field:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Call_Hierarchy">
            <summary>Call Hierarchy</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Calls_To_0">
            <summary>Calls To '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Calls_To_Base_Member_0">
            <summary>Calls To Base Member '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Calls_To_Interface_Implementation_0">
            <summary>Calls To Interface Implementation '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Computing_Call_Hierarchy_Information">
            <summary>Computing Call Hierarchy Information</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Implements_0">
            <summary>Implements '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Initializers">
            <summary>Initializers</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.References_To_Field_0">
            <summary>References To Field '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Calls_To_Overrides">
            <summary>Calls To Overrides</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preview_changes1">
            <summary>_Preview changes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Apply3">
            <summary>Apply</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Cancel">
            <summary>Cancel</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Changes">
            <summary>Changes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Preview_changes2">
            <summary>Preview changes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.IntelliSense">
            <summary>IntelliSense</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.IntelliSense_Commit_Formatting">
            <summary>IntelliSense Commit Formatting</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_Tracking">
            <summary>Rename Tracking</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Removing_0_from_1_with_content_colon">
            <summary>Removing '{0}' from '{1}' with content:</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_does_not_support_the_1_operation_However_it_may_contain_nested_2_s_see_2_3_that_support_this_operation">
            <summary>'{0}' does not support the '{1}' operation. However, it may contain nested '{2}'s (see '{2}.{3}') that support this operation.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Brace_Completion">
            <summary>Brace Completion</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Cannot_apply_operation_while_a_rename_session_is_active">
            <summary>Cannot apply operation while a rename session is active.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_rename_tracking_session_was_cancelled_and_is_no_longer_available">
            <summary>The rename tracking session was cancelled and is no longer available.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Highlighted_Written_Reference">
            <summary>Highlighted Written Reference</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Cursor_must_be_on_a_member_name">
            <summary>Cursor must be on a member name.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Brace_Matching">
            <summary>Brace Matching</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Locating_implementations">
            <summary>Locating implementations...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Locating_bases">
            <summary>Locating bases...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Go_To_Implementation">
            <summary>Go To Implementation</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Go_To_Base">
            <summary>Go To Base</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.New_name_colon_0">
            <summary>New name: {0}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Modify_any_highlighted_location_to_begin_renaming">
            <summary>Modify any highlighted location to begin renaming.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Paste">
            <summary>Paste</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Navigating">
            <summary>Navigating...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Suggestion_ellipses">
            <summary>Suggestion ellipses (…)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_declarations">
            <summary>'{0}' declarations</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.An_inline_rename_session_is_active_for_identifier_0">
            <summary>An inline rename session is active for identifier '{0}'. Invoke inline rename again to access additional options. You may continue to edit the identifier being renamed at any time.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Rename_Conflict">
            <summary>Inline Rename Conflict</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Rename_Field_Background_and_Border">
            <summary>Inline Rename Field Background and Border</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Rename_Field_Text">
            <summary>Inline Rename Field Text</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Block_Comment_Editing">
            <summary>Block Comment Editing</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Comment_Uncomment_Selection">
            <summary>Comment/Uncomment Selection</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Code_Completion">
            <summary>Code Completion</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Execute_In_Interactive">
            <summary>Execute In Interactive</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Extract_Interface">
            <summary>Extract Interface</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Go_To_Adjacent_Member">
            <summary>Go To Adjacent Member</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Interactive">
            <summary>Interactive</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Paste_in_Interactive">
            <summary>Paste in Interactive</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Navigate_To_Highlight_Reference">
            <summary>Navigate To Highlighted Reference</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Outlining">
            <summary>Outlining</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_Tracking_Cancellation">
            <summary>Rename Tracking Cancellation</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Signature_Help">
            <summary>Signature Help</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Smart_Token_Formatter">
            <summary>Smart Token Formatter</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Code_cleanup_is_not_configured">
            <summary>Code cleanup is not configured</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Format_document_performed_additional_cleanup">
            <summary>Format Document performed additional cleanup</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Configure_it_now">
            <summary>Configure it now</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Do_not_show_this_message_again">
            <summary>Do not show this message again</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Applying_changes">
            <summary>Applying changes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.String_Escape_Character">
            <summary>String - Escape Character</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Change_configuration">
            <summary>Change configuration</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Paste_Tracking">
            <summary>Paste Tracking</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Filter_image_element">
            <summary>Filter</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Warning_image_element">
            <summary>Warning</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Invalid_assembly_name">
            <summary>Invalid assembly name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Invalid_characters_in_assembly_name">
            <summary>Invalid characters in assembly name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Constants">
            <summary>User Members - Constants</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Enum_Members">
            <summary>User Members - Enum Members</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Events">
            <summary>User Members - Events</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Extension_Methods">
            <summary>User Members - Extension Methods</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Fields">
            <summary>User Members - Fields</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Locals">
            <summary>User Members - Locals</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Methods">
            <summary>User Members - Methods</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Namespaces">
            <summary>User Members - Namespaces</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Parameters">
            <summary>User Members - Parameters</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Properties">
            <summary>User Members - Properties</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Members_Labels">
            <summary>User Members - Labels</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Keyword_Control">
            <summary>Keyword - Control</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Symbol_Static">
            <summary>Symbol - Static</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Operator_Overloaded">
            <summary>Operator - Overloaded</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Waiting_for_background_work_to_finish">
            <summary>Waiting for background work to finish...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_symbols_file">
            <summary>Rename symbol's _file</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_file_partial_type">
            <summary>Rename _file (not allowed on partial types)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_file_name_doesnt_match">
            <summary>Rename _file (type does not match file name)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Toggle_Block_Comment">
            <summary>Toggle Block Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Toggling_block_comment">
            <summary>Toggling block comment...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Toggle_Line_Comment">
            <summary>Toggle Line Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Toggling_line_comment">
            <summary>Toggling line comment...</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Expander_display_text">
            <summary>items from unimported namespaces</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Expander_image_element">
            <summary>Expander</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Split_comment">
            <summary>Split comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_implemented_members">
            <summary>'{0}' implemented members</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.external">
            <summary>(external)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Hints">
            <summary>Inline Hints</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Records">
            <summary>User Types - Records</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.User_Types_Record_Structs">
            <summary>User Types - Record Structs</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Get_help_for_0">
            <summary>Get help for '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Gathering_Suggestions_0">
            <summary>Gathering Suggestions - '{0}'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Gathering_Suggestions_Waiting_for_the_solution_to_fully_load">
            <summary>Gathering Suggestions - Waiting for the solution to fully load</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Reassigned_variable">
            <summary>Reassigned variable</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.No">
            <summary>No</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Yes">
            <summary>Yes</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Do_not_prefer_this_or_Me">
            <summary>Do not prefer 'this.' or 'Me.'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.In_arithmetic_binary_operators">
            <summary>In arithmetic operators</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.In_other_binary_operators">
            <summary>In other binary operators</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.In_relational_binary_operators">
            <summary>In relational operators</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Prefer_is_null_for_reference_equality_checks">
            <summary>Prefer 'is null' for reference equality checks</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Prefer_this_or_Me">
            <summary>Prefer 'this.' or 'Me.'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Qualify_event_access_with_this_or_Me">
            <summary>Qualify event access with 'this' or 'Me'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Qualify_field_access_with_this_or_Me">
            <summary>Qualify field access with 'this' or 'Me'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Qualify_method_access_with_this_or_Me">
            <summary>Qualify method access with 'this' or 'Me'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Qualify_property_access_with_this_or_Me">
            <summary>Qualify property access with 'this' or 'Me'</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Indentation_Size">
            <summary>Indentation Size</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Insert_Final_Newline">
            <summary>Insert Final Newline</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.New_Line">
            <summary>New Line</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Tab_Size">
            <summary>Tab Size</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Use_Tabs">
            <summary>Use Tabs</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Comment">
            <summary>Regex - Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Character_Class">
            <summary>Regex - Character Class</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Alternation">
            <summary>Regex - Alternation</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Anchor">
            <summary>Regex - Anchor</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Quantifier">
            <summary>Regex - Quantifier</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_SelfEscapedCharacter">
            <summary>Regex - Self Escaped Character</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Grouping">
            <summary>Regex - Grouping</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_Text">
            <summary>Regex - Text</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Regex_OtherEscape">
            <summary>Regex - Other Escape</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Diagnostics_Error">
            <summary>Inline Diagnostics - Error</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Diagnostics_Rude_Edit">
            <summary>Inline Diagnostics - Rude Edit</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Inline_Diagnostics_Warning">
            <summary>Inline Diagnostics - Warning</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Execute_Suggested_Action">
            <summary>Execute Suggested Action</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Language_client_initialization_failed">
            <summary>{0} failed to initialize. Status = {1}. Exception = {2}</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.The_results_may_be_incomplete_due_to_the_solution_still_loading_projects">
            <summary>The results may be incomplete due to the solution still loading projects.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Property_Name">
            <summary>JSON in string literal - Property Name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Array">
            <summary>JSON in string literal - Array</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Comment">
            <summary>JSON in string literal - Comment</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Keyword">
            <summary>JSON in string literal - Keyword</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Number">
            <summary>JSON in string literal - Number</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Object">
            <summary>JSON in string literal - Object</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Operator">
            <summary>JSON in string literal - Operator</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Punctuation">
            <summary>JSON in string literal - Punctuation</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_String">
            <summary>JSON in string literal - String</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Text">
            <summary>JSON in string literal - Text</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.JSON_in_string_literal_Constructor_Name">
            <summary>JSON in string literal - Constructor Name</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources._0_Esc_to_cancel">
            <summary>{0} (Esc to cancel)</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Computing_Encapsulate_Field_information">
            <summary>Computing 'Encapsulate Field' information</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Rename_operation_could_not_complete_due_to_external_change_to_workspace">
            <summary>Rename operation could not complete due to external change to workspace</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Roslyn_Test_Code">
            <summary>Roslyn Test Code</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditorFeaturesResources.Roslyn_Test_Code_Markup">
            <summary>Roslyn Test Code Markup</summary>
        </member>
    </members>
</doc>
